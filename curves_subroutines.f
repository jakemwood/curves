!  This file contains most of the subroutines used in this
!  implementation of CURVES.  These are contained in a single file for
!  easier compilation and use.

!  These routines must be called by another program: this collection
!  of routines cannot be run as a program by itself.

! ********************************************************************

!  Subroutines and functions in this file are contained below:

!   a2i -- character string to integer
!   a2f -- character string to real (KIND=4)
!   clear_string.f -- change a string to blanks
!   f5090.f -- F(50,90) propagation curves
!   fltc_metric.f -- field strength calculations, given location & time variables
!   fzq.f -- called by fltc_metric.f
!   itplbv.f  -- Bivariate Interpolation Algorithm
!   leftjust.f -- Left-justify a character string
!   length.f -- find length of a character string
!   round.f -- round A to B precision: B=1 whole no, b=.1 to tenth
!   round_power.f -- round ERP & TPO per 73.212
!   stop_new_back.f -- Analyze user keyboard responses
!   tvfmfs_metric -- FM, VHF & UHF NTSC F(50,50), F(50,10) propagation curves
!   upper.f  -- character string to upper case

! =====================================================================
! A2I.F
! This function changes a character string to an integer, via an internal unit
      Function a2i(string)

! This function converts a string to an integer, via an internal unit

      Character *(*)  string
      integer a2i

      read(string, *, end=1) a2i

 1    return
      end

! =====================================================================
! A2F.F
! This function changes a character string to a real, via an internal unit

      Function a2f(string)

! This function converts a string to an real, via an internal unit

      Character *(*)  string
      real a2f, anumber

      read(string, *, end=1) a2f

 1    return
      end



! ===============================================================
! CLEAR_STRING.F

      subroutine clear_string(string)

	character *(*) string
	integer i

	do i=1, (length(string)), 1

	  string(i:i) = ''

	end do
	return
	end


! =====================================================================
! F2A.F

      Function f2a(number)

! This function converts a real to a string, via an internal unit
! String is left-justified
      Real number
      Character *30 f2a  !maximum number of digits possible

	  write(f2a, *       ) number
  	  read(f2a,  *, end=1) f2a
 1    call leftjust(f2a)

      return

      end

!==============================================================
!==============================================================
! F5090.F
! FCC F(50,90) Digital TV propagations curves calculations

      subroutine f5090( erpx, haatx, ichannel, field, distance,
     &                        ichoise, flag )


!     inputs :  ichannel --- input channel
!               ichoise  --- 1 = field strength, given distance;
!                            2 = distance, given field strength.
!               erpx -------- proposed erp in kW
!               haatx ------   proposed haat in meters
!               field ---   field strength in dBu
!               distance----  distance to the contour in km.
!

      real fs(201)
!      real fs(1000)
	  real d(201)
!      real d(1000)
  	  real h(201)
!      real h(1000)
      character*2 flag
      real erpx,haatx,field,distance
      integer ichannel, ichoise

      range=100.0
      n_points=201
!      n_points=1000
!
      if(ichannel.le.6)  freq=100.0    ! channels 2-6
      if(ichannel.ge.7)  freq=180.0    ! channels 7-13
      if(ichannel.ge.14) freq=480.0    ! channels 14 and above


	  erp_db = 10.0 * log10(erpx)

!***********************************************************************
!
      if(ichoise.eq.1) then   ! field strength, given distance
!
      d(1)=distance
      h(1)=haatx
      call fltc_metric(freq,50.0,90.0,1,d,h,fs,2)
         field=erp_db+fs(1)
      else                        ! distance, given field strength
!
      do kk=1,n_points,1
        h(kk)=haatx
      end do

      d_first=1.5         ! start at 1.5 kM
      d_last=300.0        ! end at 300 kM

      do kk=1,n_points,1
       d(kk)=d_first+(kk-1)*0.5   !
      end do

510   continue

      call fltc_metric(freq,50.0,90.0,n_points,d,h,fs,2)

      do kk=1,n_points,1
       fs(kk)=fs(kk)+erp_db
      end do

!     check the first point

      if(field.gt.fs(1)) then
       flag='A1'                    ! free space equation
       e_volts_meter=1.0E-6*10.0**(field/20.0)
       distance=7.014271E-3*sqrt(erpx*1000.)

!     check the last point

      else if(field .lt. fs(n_points)) then
       do i=1,n_points,1
        d(i)=d(i)+range
       end do

       if(d(1).lt.d_last) then
       go to 510
       else
       flag='A2'
       distance=0.0
       endif

      else
!      field value lies within the range

      do i=2,n_points,1
        if(field.le.fs(i-1).and.
     2      field.gt.fs(i)) then
        distance=(field-fs(i-1))/(fs(i)-fs(i-1))*
     2           (d(i)-d(i-1))+d(i-1)
        if(distance.gt.d_last)then
         flag='A2'                  ! A2 = distance exceeds the greatest
        end if                      !      curve value
        return
        end if
       end do

       end if
      end if

      return
      end



! =================================================================
!  FLTC_METRIC.F

      SUBROUTINE FLTC_METRIC ( FREQ, L, T, NP, D, H, FS, UNIT )
!
!**********************************************************************
!     This subroutine will calculate a field strength vs distance     *
!     curve for any percent of locations ( L ) and time ( T ) using   *
!     the FM & TV propagation curves.                                 *
!                                                                     *
!     The arguments are:                                              *
!                                                                     *
!     freq -- The FM or TV frequency, in MHz, input, real.            *
!                                                                     *
!        l -- The percent of locations, input, real.                  *
!                                                                     *
!        t -- The percent of time, input, real.                       *
!                                                                     *
!       np -- The number of points to be calculated for the field     *
!             strength vs distance curve, input, integer.             *
!                                                                     *
!        d -- Array of np distances at which the field is to be       *
!             calculated, input, real, miles or kilometers.           *
!                                                                     *
!        h -- Array of np antenna heights above average terrain       *
!             ( HAAT ) corresponding to the distance values in array  *
!             d at which the field is to be calculated, input, real,  *
!             feet or meters.                                         *
!                                                                     *
!       fs -- Array of calculated field strength values corresponding *
!             to the requested d and h value, output, real, in        *
!             db above one microvolt per meter for one kilowatt erp.  *
!                                                                     *
!     unit -- Switch that tells what the distance units are;          *
!             1 = english units of feet & miles,                      *
!             2 = metric units of meters & kilometers.                *
!             Internal subroutine units are metric, therefore english *
!             units are changed to metric for the calculations.       *
!                                                                     *
!     This subroutine is derived from the original english version    *
!     by changing the distances to metric in the data arrays.         *
!                                                                     *
!     ... kalagian   9-28-87 ...                                      *
!**********************************************************************
!

      REAL L
!
      INTEGER UNIT

      DIMENSION D50(25), H50(13), D10(31), H10(13), F55LV(25,13),
     &          F51LV(31,13), F55HV(25,13), F51HV(31,13), F55U(25,13),
     &          F51U(31,13),DM(1000), HF(1000), FS(1000), D(1000),
     &          H(1000), F5050(1000), F5010(1000)

       D50(1)=   1.609344
       D50(2)=   3.218688
       D50(3)=   4.828032
       D50(4)=   6.437376
       D50(5)=   8.046720
       D50(6)=   16.09344
       D50(7)=   32.18688
       D50(8)=   48.28032
       D50(9)=   64.37376
       D50(10)=  80.46720
       D50(11)=  96.56064
       D50(12)=  112.65408
       D50(13)=  128.74752
       D50(14)=  144.84096
       D50(15)=  160.93440
       D50(16)=  177.02784
       D50(17)=  193.12128
       D50(18)=  209.21472
       D50(19)=  225.30816
       D50(20)=  241.40160
       D50(21)=  257.49504
       D50(22)=  273.58848
       D50(23)=  289.68192
       D50(24)=  305.77536
       D50(25)=  321.86880

!
!      D10 IN TVFMFS

        D10(1)=16.09344
        D10(2)=32.18688
        D10(3)=48.28032
        D10(4)=64.37376
        D10(5)=80.46720
        D10(6)=96.56064
        D10(7)=112.65408
        D10(8)=128.74752
        D10(9)=144.84096
        D10(10)=160.93440
        D10(11)=177.02784
        D10(12)=193.12128
        D10(13)=209.21472
        D10(14)=225.30816
        D10(15)=241.40160
        D10(16)=257.49504
        D10(17)=273.58848
        D10(18)=289.68192
        D10(19)=305.77536
        D10(20)=321.86880
        D10(21)=337.96224
        D10(22)=354.05568
        D10(23)=370.14912
        D10(24)=386.24256
        D10(25)=402.33600
        D10(26)=418.42944
        D10(27)=434.52288
        D10(28)=450.61632
        D10(29)=466.70976
        D10(30)=482.80320
! Distance of D10(31) added to smooth out the graph and interpolation
! for the rarely used F(50,10) curve at 500 km
        D10(31)=498.89644
!
!       H10, H50 IN TVFMFS

         H10(1)=30.48
         H10(2)=60.96
         H10(3)=121.92
         H10(4)=182.88
         H10(5)=243.84
         H10(6)=304.80
         H10(7)=381.00
         H10(8)=457.20
         H10(9)=533.40
         H10(10)=609.60
         H10(11)=914.40
         H10(12)=1219.20
         H10(13)=1524.00

         H50(1)=30.48
         H50(2)=60.96
         H50(3)=121.92
         H50(4)=182.88
         H50(5)=243.84
         H50(6)=304.80
         H50(7)=381.00
         H50(8)=457.20
         H50(9)=533.40
         H50(10)=609.60
         H50(11)=914.40
         H50(12)=1219.20
         H50(13)=1524.00

!
!***********************************************************************
!                                                                      *
!  F(50,50) FIELD STRENGTH DATA FOR THE LOW VHF PROPAGATION
!  CURVE.  (FM AND TV CHANNELS 2 THRS 6 )                                  *
!***********************************************************************

       DATA  ( F55LV(1,J), J = 1, 13 ) /
     &     92., 98., 100.6, 101.5, 101.9, 102., 102.1, 102.2, 102.3,
     &     102.4, 102.5, 102.5, 102.5 /
       DATA  ( F55LV(2,J), J = 1, 13 ) /
     &     79.7, 85.9, 91., 93.4, 94.6, 95., 95.6, 95.9, 96., 96.1,
     &     96.3, 96.5, 96.5 /
       DATA ( F55LV(3,J), J = 1, 13 ) /
     &     72.7, 79.,  84.8, 87.8, 89.4, 90.4, 91.2, 91.8, 92., 92.2,
     &     92.5, 92.5, 92.5 /
       DATA (  F55LV(4,J), J = 1, 13 ) /
     &     67.8, 73.8, 80.,  83.3, 85.4, 86.8, 87.7, 88.3, 88.9, 89.2,
     &     89.9, 90.1, 90.2 /
       DATA ( F55LV(5,J), J = 1, 13 ) /
     &     64.,  70.,  76.,  79.6, 82.,  83.7,  85., 85.8, 86.3, 86.7,
     &     87.6, 88.,  88.1 /
       DATA ( F55LV(6,J), J = 1, 13 ) /
     &     52.,  58.,  64.,  67.6, 70.,  72.,  73.9, 75.4, 76.7, 77.9,
     &     80.2, 81.3, 81.9 /
       DATA ( F55LV(7,J), J = 1, 13 ) /
     &     39.4, 45.5, 51.5, 55.,  57.6, 59.6, 61.7, 63.3, 64.9, 66.2,
     &     70.,  72.4, 74.2 /
       DATA (  F55LV(8,J), J = 1, 13 ) /
     &     31.,  37.,  43.,  46.7, 49.,  51.,  53.2, 55.1, 57., 58.5,
     &     62.6, 65.,  66.5 /
       DATA ( F55LV(9,J), J = 1, 13 ) /
     &     25.3, 29.5, 35.5, 39.,  41.5, 43.6, 45.9, 47.9, 50.,  51.5,
     &     55.4, 57.8, 59.6 /
       DATA ( F55LV(10,J), J = 1, 13 ) /
     &     20.3, 23.5, 28.8, 32.,  34.4, 36.7, 39.1, 41.5, 43.5, 45.,
     &     48.9, 51.2, 53. /
       DATA ( F55LV(11,J), J = 1, 13 ) /
     &     16.2, 18.1, 22.,  25.3, 27.7, 29.9, 32.,  34.4, 36.7, 38.2,
     &     42.5, 44.9, 46.4 /
       DATA ( F55LV(12,J), J = 1, 13 ) /
     &     12.8, 14.5, 17.1, 19.8, 22.,  23.9, 26.,  28.3, 30.7, 32.4,
     &     36.9, 39.1, 40.8 /
       DATA ( F55LV(13,J), J = 1, 13 ) /
     &      9.8, 11.,  13.4, 15.2, 17.,  18.8, 21.,  23.2, 25.2, 27.,
     &     31.,  33.2, 35. /
       DATA ( F55LV(14,J), J = 1, 13 ) /
     &      6.9,  8.2, 10.2, 11.8, 13.1, 14.7, 16.8, 18.8, 20.4, 22.,
     &     25.7, 28.1, 30. /
       DATA (  F55LV(15,J), J = 1, 13 ) /
     &      4.,   5.5,  7.4,  8.9, 10.1, 11.5, 13.1, 14.9, 16.,  17.3,
     &     21.,  23.5, 25.5 /
       DATA ( F55LV(16,J), J = 1, 13 ) /
     &      1.5,  2.9,  4.8,  6.,   7.2,  8.4,  9.9, 11.1, 12.5, 13.7,
     &     17.1, 19.8, 21.8 /
       DATA (  F55LV(17,J), J = 1, 13 ) /
     &     -1.1,   .3,  2.2,  3.7,  4.8,  5.7,  7.,   8.,   9.1, 10.1,
     &     13.6, 16.1, 18.3 /
       DATA ( F55LV(18,J), J = 1, 13 ) /
     &     -3.6, -2.2,  -.3,  1.,   2.,   3.,   4.1,  5.2,  6.2,  7.1,
     &     10.3, 13.,  15. /
       DATA ( F55LV(19,J), J = 1, 13 ) /
     &     -5.8, -4.8, -3.,  -1.4,  -.3,   .6,  1.7,  2.7,  3.8,  4.6,
     &      7.8, 10.4, 12.4 /
       DATA ( F55LV(20,J), J = 1, 13 ) /
     &     -8.1, -7.,  -5.2, -3.9, -2.7, -1.8,  -.7,   .2,  1.1,  2.,
     &      5.1,  8.,  10. /
       DATA ( F55LV(21,J), J = 1, 13 ) /
     &    -10.6, -9.4, -7.6, -6.1, -5.1, -4.2, -3.2, -2.2, -1.3,  -.4,
     &      2.8,  5.5,  7.7 /
       DATA ( F55LV(22,J), J = 1, 13 ) /
     &    -13., -11.7, -10., -8.7, -7.6, -6.6, -5.6, -4.6, -3.6, -2.7,
     &       .5,  3.1,   5.1 /
       DATA (  F55LV(23,J), J = 1, 13 ) /
     &    -15.1, -14., -12.2, -11., -10., -9., -8.,  -7.,  -6.1, -5.1,
     &     -2.1,   .6,   2.8 /
       DATA ( F55LV(24,J), J = 1, 13 ) /
     &    -17.2, -16.1, -14.6, -13.2, -12.1, -11.2, -10.2, -9.2, -8.4,
     &     -7.6,  -4.5,  -2.,     .2 /
       DATA ( F55LV(25,J), J = 1, 13 ) /
     &    -19.2, -18.3, -16.9, -15.6, -14.6, -13.6, -12.5, -11.6,
     &    -10.6, -10.,   -6.8,  -4.1,  -2. /
!
!
!***********************************************************************
!                                                                      *
!  F(50,10) FIELD STRENGTH DATA FOR THE LOW VHF PROPAGATION
!  CURVE.  (FM AND TV CHANNELS 2 THRS 6 )                                  *
!***********************************************************************
!

      DATA ( F51LV(1,J), J = 1, 13 ) /
     &   52.2, 58.4, 64.3, 68.,  70.5, 72.3, 74.2, 75.9, 77.,  78.2,
     &   80.8, 81.8, 82.2 /
      DATA ( F51LV(2,J), J = 1, 13 ) /
     &   41.4, 47.,  53.,  56.5, 59.,  60.9, 63.,  64.8, 66.2, 67.6,
     &   71.2, 73.8, 75.5 /
      DATA ( F51LV(3,J), J = 1, 13 ) /
     &   36.4, 40.9, 45.9, 49.,  51.7, 53.7, 56.,  57.9, 59.6, 60.9,
     &   64.5, 67.,  69. /
      DATA ( F51LV(4,J), J = 1, 13 ) /
     &   33.,  36.,  39.9, 43.,  45.4, 47.5, 50.,  52.,  54.,  55.2,
     &   58.9, 61.4, 63.3 /
      DATA ( F51LV(5,J), J = 1, 13 ) /
     &   30.,  31.9, 35.,  37.7, 40.,  41.9, 44.4, 46.7, 48.5, 50.,
     &   53.9, 56.3, 58.4 /
      DATA ( F51LV(6,J), J = 1, 13 ) /
     &   26.7, 28.,  30.5, 32.8, 34.9, 36.8, 39.2, 41.6, 43.5, 45.,
     &   49.,  51.7, 53.5 /
      DATA ( F51LV(7,J), J = 1, 13 ) /
     &   23.5, 24.9, 26.9, 28.8, 30.4, 32.,  34.9, 37.1, 39.2, 40.7,
     &   44.2, 46.9, 48.8 /
      DATA ( F51LV(8,J), J = 1, 13 ) /
     &   20.4, 22.,  24.,  25.6, 27.,  28.4, 30.8, 33.,  35.,  36.2,
     &   39.8, 42.,  44. /
      DATA ( F51LV(9,J), J = 1, 13 ) /
     &   17.4, 19.,  20.9, 22.5, 23.9, 25.,  27.,  29.,  30.8, 32.,
     &   35.4, 37.8, 39.7 /
      DATA ( F51LV(10,J), J = 1, 13 ) /
     &   14.5, 16.1, 18.2, 19.8, 21.,  22.,  23.9, 25.5, 26.9, 28.,
     &   31.3, 33.8, 35.7 /
      DATA ( F51LV(11,J), J = 1, 13 ) /
     &   11.5, 13.1, 15.3, 16.9, 18.2, 19.2, 20.8, 22.,  23.2, 24.1,
     &   27.6, 30.,  32.1 /
      DATA ( F51LV(12,J), J = 1, 13 ) /
     &    8.5, 10.1, 12.4, 13.9, 15.1, 16.2, 17.8, 19.,  20.,  21.,
     &   24.4, 27.,  29.1 /
      DATA ( F51LV(13,J), J = 1, 13 ) /
     &    5.9,  7.7,  9.8, 11.,  12.3, 13.4, 14.8, 16.,  17.1, 18.,
     &   21.6, 24.1, 26.1 /
      DATA ( F51LV(14,J), J = 1, 13 ) /
     &    3.,   4.9,  6.9,  8.2,  9.7, 10.7, 12.,  13.2, 14.2, 15.3,
     &   18.9, 21.5, 23.5 /
      DATA ( F51LV(15,J), J = 1, 13 ) /
     &     .6,  2.,   4.1,  5.7,  6.9,  8.,   9.1, 10.3, 11.6, 12.5,
     &   16.,  18.8, 20.9 /
      DATA ( F51LV(16,J), J = 1, 13 ) /
     &   -2.,   -.4,  1.6,  2.9,  4.1,  5.3,  6.7,  7.9,  9.,  10.,
     &   13.6, 16.1, 18. /
      DATA ( F51LV(17,J), J = 1, 13 ) /
     &   -4.3, -3.,  -1.,    .3,  1.6,  2.7,  3.9,  5.,   6.,   7.,
     &   10.7, 13.6, 15.7 /
      DATA ( F51LV(18,J), J = 1, 13 ) /
     &   -6.6, -5.1, -3.4, -2.2, -1.,   0.,   1.1,  2.2,  3.3,  4.4,
     &    8.,  10.9, 13. /
      DATA ( F51LV(19,J), J = 1, 13 ) /
     &   -8.7, -7.4, -5.8, -4.6, -3.4, -2.5, -1.4,  -.2,   .9,  1.8,
     &    5.2,  8.1, 10.2 /
      DATA ( F51LV(20,J), J = 1, 13 ) /
     &  -10.5, -9.4, -8.,  -6.9, -5.7, -4.9, -3.9, -2.8, -1.8,  -.8,
     &    2.8,  5.3, 7.5 /
      DATA ( F51LV(21,J), J = 1, 13 ) /
     &  -12.5, -11.4, -10.1, -9., -8., -7.,  -6.,  -5.,  -4.,  -3.,
     &     .3,   3.,    5. /
      DATA ( F51LV(22,J), J = 1, 13 ) /
     &  -14.6, -13.4, -12., -11., -10., -9., -8.,  -7.,  -6.2, -5.3,
     &   -2.,     .4,   2.6 /
      DATA ( F51LV(23,J), J = 1, 13 ) /
     &  -16.6, -15.5, -14.1, -13., -12., -11.2, -10.2, -9.2, -8.2, -7.4,
     &   -4.5,  -1.9,   0. /
      DATA ( F51LV(24,J), J = 1, 13 ) /
     &  -18.6, -17.4, -16., -15., -14., -13.2, -12.2, -11.3, -10.5,
     &   -9.8,  -7.,   -4.3, -2.4 /
      DATA ( F51LV(25,J), J = 1, 13 ) /
     &  -20.5, -19.3, -18., -17., -16., -15.1, -14.2, -13.3, -12.5,
     &  -11.8,  -9.,   -6.7, -4.6 /
      DATA ( F51LV(26,J), J = 1, 13 ) /
     &  -22.4, -21.2, -19.9, -18.9, -17.9, -17., -16.2, -15.3, -14.6,
     &  -14.,  -11.1,  -9.,   -6.9 /
      DATA ( F51LV(27,J), J = 1, 13 ) /
     &  -24.3, -23.2, -21.9, -20.9, -19.9, -19., -18.1, -17.2, -16.3,
     &  -15.8, -13.2, -11.,   -9. /
      DATA ( F51LV(28,J), J = 1, 13 ) /
     &  -26.2, -25., -23.7, -22.5, -21.7, -21., -20., -19.2, -18.4,
     &  -17.8, -15., -12.9, -11. /
      DATA ( F51LV(29,J), J = 1, 13 ) /
     &  -28.1, -27., -25.6, -24.6, -23.6, -23., -22., -21.1, -20.2,
     &  -19.6, -17., -14.9, -13. /
      DATA ( F51LV(30,J), J = 1, 13 ) /
     &  -30.,  -29., -27.4, -26.3, -25.4, -24.5, -23.7, -22.8, -22.,
     &  -21.4, -19., -16.9, -15. /
     
! Derived Interfering curve added to smooth out the graph and interpolation
! for the rarely used F(50,10) curve at 500 km
      DATA ( F51LV(31,J), J = 1, 13 ) /
     &  -31.9, -31., -29.2, -28.,  -27.2, -26.2, -25.4, -24.5, -23.8,
     &  -23.,  -21., -18.9, -17. /
     

!***********************************************************************
!                                                                      *
!F(50,50) FIELD STRENGTH DATA FOR THE HIGH VHF PROPAGATION
!    CURVE    ( TV CHANNELS 7 THROUGH 13 )
!***********************************************************************
!
      DATA ( F55HV(1,J), J = 1, 13 ) /
     &    94.6, 100.7, 101.6, 101.8, 101.9, 102., 102.3, 102.3, 102.3,
     &   102.4, 102.4, 102.4, 102.5 /
      DATA ( F55HV(2,J), J = 1, 13 ) /
     &    82.8, 88.9, 92.3, 93.9, 94.6, 95.,  95.4, 95.7, 95.9, 96.,
     &    96.2, 96.2, 96.5 /
      DATA ( F55HV(3,J), J = 1, 13 ) /
     &    75.7, 81.8, 86.6, 88.7, 89.8, 90.5, 91.3, 91.8, 92.,  92.1,
     &    92.6, 92.6, 92.7 /
      DATA ( F55HV(4,J), J = 1, 13 ) /
     &    70.7, 76.9, 82.2, 84.8, 86.2, 87.,  88., 88.7, 89.1, 89.5,
     &    90.,  90.,  90.1 /
      DATA ( F55HV(5,J), J = 1, 13 ) /
     &    66.8, 73.,  78.8, 81.6, 83.2, 84.5, 85.7, 86.3, 87., 87.3,
     &    88.,  88.,  88. /
      DATA ( F55HV(6,J), J = 1, 13 ) /
     &    55.,  61.,  67.2, 70.8, 73.2, 75.,  77.,  78.1, 79.1, 80.,
     &    81.1, 81.8, 82. /
      DATA ( F55HV(7,J), J = 1, 13 ) /
     &    42.5, 48.6, 54.7, 58.1, 60.7, 62.5, 65.,  67.6, 69.5, 71.,
     &    73.9, 74.8, 75. /
      DATA ( F55HV(8,J), J = 1, 13 ) /
     &    34.,  40.,  46.1, 49.8, 52.1, 54.2, 56.7, 59.,  61.,  62.8,
     &    66.3, 67.4, 68. /
      DATA ( F55HV(9,J), J = 1, 13 ) /
     &    26.3, 32.,  38.1, 41.7, 44.,  46.,  48.8, 51.,  53.3,  55.,
     &    58.7, 60.3, 61.1 /
      DATA ( F55HV(10,J), J = 1, 13 ) /
     &    20.7, 24.1, 30.1, 33.8, 36.1, 38.,  40.9, 43.5, 46.,  47.9,
     &    52.,  53.8, 54.6 /
      DATA ( F55HV(11,J), J = 1, 13 ) /
     &    16.3, 18.5, 23.,  26.2, 28.8, 30.6, 33.5, 36.3, 39.,  41.,
     &    45.,  47.,  48.1 /
      DATA ( F55HV(12,J), J = 1, 13 ) /
     &    12.9, 14.4, 17.,  20.,  22.1, 24.,  26.8, 29.6, 32.,  34.,
     &    38.2, 40.6, 42. /
      DATA ( F55HV(13,J), J = 1, 13 ) /
     &     9.9, 11.2, 13.5, 15.2, 17.,  18.9, 21.2, 23.9, 26.,  28.,
     &    32.,  34.4, 36.1 /
      DATA ( F55HV(14,J), J = 1, 13 ) /
     &     7.,  8.3,  10.5, 12.,  13.7, 15.,  17.,  19.,  21.,  22.6,
     &    26.3, 28.8, 30.6 /
      DATA ( F55HV(15,J), J = 1, 13 ) /
     &     4.3, 5.5,  7.5,  9.,  10.4,  11.5, 13.1, 14.9, 16.2, 17.5,
     &    21.1, 23.8, 25.5 /
      DATA ( F55HV(16,J), J = 1, 13 ) /
     &     1.5,  2.9,  4.8, 6.2,  7.5,  8.6,  10.,  11.2, 12.7, 13.6,
     &    17.,  19.8, 21.8 /
      DATA ( F55HV(17,J), J = 1, 13 ) /
     &    -1.,  .5,  2.3,  3.7,  4.8,  5.8,  7.,  8.2,  9.5,  10.5,
     &    14., 16.6, 18.5 /
      DATA ( F55HV(18,J), J = 1, 13 ) /
     &    -3.5, -2.,  -.3, 1.,  2.2,  3.2,  4.4,  5.5,  6.5,  7.4,
     &    10.7, 13.1, 15.1 /
      DATA ( F55HV(19,J), J = 1, 13 ) /
     &    -5.7, -4.3, -2.7,  -1.2,   -.1,  .9,   2.,  3.,  4.,  4.9,
     &     8.,  10.4, 12.3 /
      DATA ( F55HV(20,J), J = 1, 13 ) /
     &    -8.,  -6.9, -5.,  -3.7,  -2.5,  -1.5,  -.5,  .6, 1.5, 2.2,
     &     5.6,  8.2, 10.1 /
      DATA ( F55HV(21,J), J = 1, 13 ) /
     &   -10.4, -9.2, -7.3, -6.,  -4.9,  -4.,  -3.,  -2.,  -1.,  -.2,
     &     3.,   5.5,  7.5 /
      DATA ( F55HV(22,J), J = 1, 13 ) /
     &   -12.8, -11.5, -9.8, -8.4, -7.3, -6.3, -5.3, -4.3, -3.5, -2.6,
     &      .6,   3.1,  5.1 /
      DATA ( F55HV(23,J), J = 1, 13 ) /
     &   -15.,  -13.8, -12., -10.7, -9.7, -8.7, -7.6, -6.6, -5.8, -5.,
     &    -1.8,    .9,   2.9 /
      DATA ( F55HV(24,J), J = 1, 13 ) /
     &   -17.2, -16.,  -14.4, -13., -12., -11., -10., -9., -8.2, -7.3,
     &    -4.2,  -1.8,    .3 /
      DATA ( F55HV(25,J), J = 1, 13 ) /
     &   -19.1, -18.2, -16.8, -15.5, -14.4, -13.4, -12.3, -11.3, -10.5,
     &    -9.8,  -6.6,  -4.,   -1.9 /
!
!
!***********************************************************************
!                                                                      *
!    F(50,10) FIELD STRENGTH DATA FOR THE HIGH VHF PROPAGATION
!    CURVE    ( TV CHANNELS 7 THRS 13 )                                        *
!***********************************************************************
!
      DATA ( F51HV(1,J), J = 1, 13 ) /
     &   55.4, 61.6, 67.7, 71.,  73.5, 75.3, 77.1, 78.6, 79.6, 80.4,
     &   82.,  82.4, 82.5 /
      DATA ( F51HV(2,J), J = 1, 13 ) /
     &   44.4, 50.,  55.8, 59.1, 61.7, 63.7, 66.5, 68.9, 70.8, 72.,
     &   75.,  75.9, 76.2 /
      DATA ( F51HV(3,J), J = 1, 13 ) /
     &   39.2, 43.5, 48.6, 52.,  54.6, 56.5, 59.,  61.5, 63.6, 65.2,
     &   68.6, 69.8, 70.2 /
      DATA ( F51HV(4,J), J = 1, 13 ) /
     &   34.,  38.,  42.7, 45.6, 48.,  50.,  52.5, 54.9, 56.9, 58.8,
     &   62.5, 64.,  64.9 /
      DATA ( F51HV(5,J), J = 1, 13 ) /
     &   29.9, 32.5, 35.9, 38.8, 41.,  43.,  45.8, 48.2, 50.8, 53.,
     &   57.,  58.9, 59.8 /
      DATA ( F51HV(6,J), J = 1, 13 ) /
     &   26.6, 28.2, 31.,  33.4, 35.4, 37.4, 40.,  43.,  45.4, 47.6,
     &   52.,  53.8, 54.8 /
      DATA ( F51HV(7,J), J = 1, 13 ) /
     &   23.5, 25.,  27.,  28.9, 30.7, 32.3, 35.,  37.4, 40.,  42.,
     &   46.8, 48.9, 50. /
      DATA ( F51HV(8,J), J = 1, 13 ) /
     &   20.3, 22.,  24.,  25.5, 27.,  28.3, 30.4, 32.9, 35.,  36.8,
     &   41.5, 43.7, 45. /
      DATA ( F51HV(9,J), J = 1, 13 ) /
     &   17.4, 19.,  21.,  22.4, 23.8, 25.,  26.9, 28.8, 30.4, 32.,
     &   35.8, 38.2, 40.1 /
      DATA ( F51HV(10,J), J = 1, 13 ) /
     &   14.3, 16.,  18.1, 19.6, 20.8, 22.,  23.5, 25.,  26.4, 27.7,
     &   31.,  33.6, 35.5 /
      DATA ( F51HV(11,J), J = 1, 13 ) /
     &   11.3, 13.,  15.1, 16.7, 18.,  19.1, 20.5, 22.,  23.,  24.,
     &   27.6, 30.,  32. /
      DATA ( F51HV(12,J), J = 1, 13 ) /
     &    8.6, 10.,  12.2, 13.7, 15.,  16.3, 17.6, 18.8, 19.9, 20.7,
     &   24.,  26.8, 28.9 /
      DATA ( F51HV(13,J), J = 1, 13 ) /
     &    5.8,  7.2,  9.4, 10.8, 12.,  13.3, 14.7, 15.9, 17.,  18.,
     &   21.4, 24.,  26. /
      DATA ( F51HV(14,J), J = 1, 13 ) /
     &    2.9,  4.7,  6.8,  8.1,  9.5, 10.6, 12.,  13.,  14.1,  15.2,
     &   18.8, 21.2, 23.4 /
      DATA ( F51HV(15,J), J = 1, 13 ) /
     &     .3,  1.9,  3.8,  5.2,  6.5,  7.8,  9.,  10.3, 11.5,  12.5,
     &   16.,  18.7, 20.7 /
      DATA ( F51HV(16,J), J = 1, 13 ) /
     &   -2.1,  -.7,  1.2,  2.7,  3.9,  5.,  6.4,   7.5,  8.8,  9.8,
     &   13.1, 15.9, 18. /
      DATA ( F51HV(17,J), J = 1, 13 ) /
     &   -4.4, -3.2, -1.4,  0.,  1.2,  2.4,  3.7,   4.9,  6.,  7.,
     &   10.6, 13.2, 15.4 /
      DATA ( F51HV(18,J), J = 1, 13 ) /
     &   -6.7, -5.4, -3.8, -2.3, -1.2,  0.,  1.,  2.1,  3.3,  4.3,
     &    7.9, 10.6, 12.8 /
      DATA ( F51HV(19,J), J = 1, 13 ) /
     &   -8.9, -7.8, -6.1, -4.8, -3.8, -2.6, -1.4,  -.3,  .8,  1.7,
     &    5.,   8.,  10. /
      DATA ( F51HV(20,J), J = 1, 13 ) /
     &  -10.8,  -9.8,  -8.2,  -7.,  -6.,  -5.,  -4.,  -3.,  -2.,  -1.,
     &    2.5,   5.2,   7.3 /
      DATA ( F51HV(21,J), J = 1, 13 ) /
     &  -12.9, -11.8, -10.3,  -9.,  -8.2,  -7.1,  -6.,  -5.1,  -4.2,
     &   -3.3,   0.,    2.8,   4.9 /
      DATA ( F51HV(22,J), J = 1, 13 ) /
     &  -14.8, -13.8, -12.3, -11.1, -10.2,  -9.3,  -8.2,  -7.4,  -6.5,
     &   -5.6,  -2.4,    .2,   2.2 /
      DATA ( F51HV(23,J), J = 1, 13 ) /
     &  -16.9, -15.8, -14.3, -13.1, -12.2, -11.2, -10.2, -9.4, -8.6,
     &   -7.8,  -4.7,  -2.,    -.1 /
      DATA ( F51HV(24,J), J = 1, 13 ) /
     &  -18.8, -17.7, -16.3, -15.1, -14.2, -13.3, -12.3, -11.4, -10.6,
     &   -9.8,  -6.9,  -4.3,  -2.4 /
      DATA ( F51HV(25,J), J = 1, 13 ) /
     &  -20.7, -19.7, -18.3, -17.,  -16.2, -15.3, -14.3, -13.5, -12.8,
     &  -12.,   -9.,   -6.5,  -4.7 /
      DATA ( F51HV(26,J), J = 1, 13 ) /
     &  -22.7, -21.4, -20.1, -19.,  -18.,  -17.2, -16.2, -15.4, -14.8,
     &  -14.,  -11.1,  -9.,   -7. /
      DATA ( F51HV(27,J), J = 1, 13 ) /
     &  -24.6, -23.3, -22.,  -20.9, -20.,  -19.1, -18.2, -17.4, -16.8,
     &  -16.,  -13.1, -11.,   -9. /
      DATA ( F51HV(28,J), J = 1, 13 ) /
     &  -26.4, -25.2, -24.,  -22.9, -21.9, -21.,  -20.,  -19.2, -18.5,
     &  -18.,  -15.1, -13.,  -11. /
      DATA ( F51HV(29,J), J = 1, 13 ) /
     &  -28.2, -27.1, -25.9, -24.8, -23.9, -23.,  -22.,  -21.1, -20.3,
     &  -19.6, -17.,  -15.,  -13. /
      DATA ( F51HV(30,J), J = 1, 13 ) /
     &  -30.1, -29.,  -27.7, -26.5, -25.6, -24.9, -23.9, -23.,  -22.1,
     &  -21.5, -19.,  -16.8, -15. /
     
! Derived Interfering curve added to smooth out the graph and interpolation
! for the rarely used F(50,10) curve at 500 km

      DATA ( F51HV(31,J), J = 1, 13) /
     &  -32.,  -30.9 ,-29.5, -28.2, -27.1, -26.7, -25.8, -24.9,  -23.9,
     &  -23.4, -21.,  -18.6, -17. /
!
!***********************************************************************
!                                                                      *
!     F(50,50) FIELD STRENGTH DATA FOR THE UHF PROPAGATION CURVE
!     ( TV CHANNELS 14 THROUGH 83 )                                       *
!***********************************************************************
!
      DATA ( F55U(1,J), J = 1, 13 )  /
     &   92.,  97.9, 100.7, 101.5, 101.9, 102.,  102.1, 102.2, 102.3,
     &  102.4, 102.5, 102.5, 102.5 /
      DATA ( F55U(2,J), J = 1, 13 ) /
     &   80.,   86.,   91.,   93.,  94.1,  94.8,  95.2,  95.6,  95.9,
     &   96.,   96.3,  96.5,  96.5 /
      DATA ( F55U(3,J), J = 1, 13 )  /
     &   72.9, 79.,  84.7, 87.4, 89.,  90.,  90.8, 91.3, 91.8, 92.,
     &   92.5, 92.8, 93. /
      DATA ( F55U(4,J), J = 1, 13 )  /
     &   67.9, 74.,  80.,  83.3, 85.1, 86.3, 87.3, 88.,  88.6, 88.9,
     &   89.6, 90.,  90.3 /
      DATA ( F55U(5,J), J = 1, 13 )  /
     &   63.8, 70.,  76.,  79.5, 81.5, 82.9, 84.1, 85.,  85.8, 86.2,
     &   87.3, 87.9, 88.1 /
      DATA ( F55U(6,J), J = 1, 13 ) /
     &   51.9, 58.,  64.,  67.6, 70.,  72.,  73.8, 75.3, 76.5, 77.2,
     &   79.6, 80.5, 81. /
      DATA ( F55U(7,J), J = 1, 13 )  /
     &   39.,  45.2, 51.2, 54.6, 57.2, 59.1, 61.,  62.6, 64.,  65.,
     &   68.2, 70.,  71.1 /
      DATA ( F55U(8,J), J = 1, 13 )  /
     &   27.5, 33.5, 39.6, 43.,  45.7, 48.,  50.5, 52.3, 53.9, 55.,
     &   58.4, 60.8, 62.5 /
      DATA ( F55U(9,J), J = 1, 13 ) /
     &   17.8, 22.7, 28.2, 31.5, 34.5, 37.3, 40.3, 42.7, 44.3, 45.7,
     &   49.4, 52.1, 54. /
      DATA ( F55U(10,J), J = 1, 13 ) /
     &   13.,  16.,  19.6, 22.3, 25.1, 28.3, 31.8, 34.1, 36.,  37.6,
     &   41.7, 44.8, 46.7 /
      DATA ( F55U(11,J), J = 1, 13 ) /
     &   10.1, 11.7, 14.4, 16.8, 19.1, 21.7, 24.7, 27.,  29.3, 31.,
     &   35.4, 38.6, 41. /
      DATA ( F55U(12,J), J = 1, 13 ) /
     &    7.,   8.5, 10.8, 12.5, 14.2, 16.3, 19.,  21.3, 23.4, 25.,
     &   29.8, 33.,  35.7 /
      DATA ( F55U(13,J), J = 1, 13 ) /
     &    4.2,  5.5,  7.7,  9.3, 10.8, 12.4, 14.5, 16.3, 18., 19.8,
     &   24.5, 28., 30.8 /
      DATA ( F55U(14,J), J = 1, 13 ) /
     &    1.6,  2.8, 4.7,   6.,   7.5,  8.9, 10.6, 12.,  13.6, 15.,
     &   19.8, 23.4, 26. /
      DATA ( F55U(15,J), J = 1, 13 ) /
     &   -1.,    .2,  1.9,  3.2,  4.6,  5.7,  7.1,  8.5,  9.7, 10.8,
     &   15.,  18.8, 21.8 /
      DATA ( F55U(16,J), J = 1, 13 ) /
     &   -3.2, -2.,   -.4,   .7,  1.9,  3.,   4.3,  5.6,  6.7,  7.7,
     &   11.5, 14.8, 17.5 /
      DATA ( F55U(17,J), J = 1, 13 ) /
     &   -5.,  -4.2, -2.7, -1.5,   -.4,  .5,  1.7,  2.8,  3.8,  4.8,
     &    8.2, 11.1, 13.7 /
      DATA ( F55U(18,J), J = 1, 13 ) /
     &   -7.2, -6.3, -4.9, -3.8,  -2.9, -2.,  -.9,  0.,   1.,   1.9,
     &    5.,   7.8, 10. /
      DATA ( F55U(19,J), J = 1, 13 ) /
     &   -9.1, -8.4, -7.,  -5.9,  -5.,  -4.2, -3.2, -2.3, -1.6,  -.9,
     &    2.,   4.6,  6.7 /
      DATA ( F55U(20,J), J = 1, 13 ) /
     &  -11., -10.3, -8.9, -7.9,  -7.,  -6.1, -5.2, -4.3, -3.6, -3.,
     &    -.2,  1.9,  3.7 /
      DATA ( F55U(21,J), J = 1, 13 ) /
     &  -13.1, -12.3, -10.9, -9.9, -9.,  -8.,  -7.1, -6.2, -5.5, -4.8,
     &   -2.2,   -.1,   1.7 /
      DATA ( F55U(22,J), J = 1, 13 ) /
     &  -15.1, -14.2, -12.8, -11.7, -10.8, -10.,  -9.,  -8.2, -7.5,
     &   -6.8,  -4.3,  -2.2,   -.4 /
      DATA ( F55U(23,J), J = 1, 13 ) /
     &  -17.2, -16.2, -14.8, -13.8, -12.8, -11.9, -11.,  -10.2, -9.5,
     &   -8.9,  -6.3,  -4.2,  -2.3 /
      DATA ( F55U(24,J), J = 1, 13 ) /
     &  -19.3, -18.3, -16.8, -15.8, -14.8, -13.9, -13.,  -12.2, -11.4,
     &  -10.8,  -8.3,  -6.1,  -4.4 /
      DATA ( F55U(25,J), J = 1, 13 ) /
     &  -21.4, -20.1, -18.7, -17.7, -16.8, -15.9, -15.,  -14.1, -13.2,
     &  -12.5, -10.,   -8.,   -6.3 /
!
!
!***********************************************************************
!                                                                      *
!     F(50,10) FIELD STRENGTH DATA FOR THE UHF PROPAGATION CURVE
!     ( TV CHANNELS 14 THRS 83 )                                       *
!***********************************************************************
!
      DATA ( F51U(1,J), J = 1, 13 ) /
     &   52.2, 58.3, 64.7, 68.,  70.5, 72.3, 74.1, 75.4, 76.4, 77.4,
     &   79.5, 80.7, 81.3 /
      DATA ( F51U(2,J), J = 1, 13 ) /
     &   41.6, 46.7, 52.4, 56.,  58.5, 60.3, 62.3, 63.9, 65.2, 66.2,
     &   69.3, 71.2, 72.6 /
      DATA ( F51U(3,J), J = 1, 13 ) /
     &   35.,  38.,  43.,  46.3, 48.8, 50.8, 52.9, 54.9, 56.3, 57.6,
     &   60.9, 63.,  64.5 /
      DATA ( F51U(4,J), J = 1, 13 ) /
     &   30.3, 32.1, 35.3, 37.6, 40.,  42.4, 45.1, 47.1, 48.7, 50.,
     &   53.6, 56.1, 58. /
      DATA ( F51U(5,J), J = 1, 13 ) /
     &   27.,  28.3, 30.8, 32.6, 34.7, 36.7, 39.,  40.8, 42.4, 43.7,
     &   47.7, 50.2, 52.4 /
      DATA ( F51U(6,J), J = 1, 13 ) /
     &   23.8, 25.2, 27.6, 29.1, 30.4, 32.,  34.5, 36.4, 37.9, 39.,
     &   43.1, 46.,  48. /
      DATA ( F51U(7,J), J = 1, 13 ) /
     &   20.8, 22.2, 24.5, 26.,  27.2, 28.4, 30.4, 32.2, 33.9, 35.1,
     &   39.2, 42.1, 44.3 /
      DATA ( F51U(8,J), J = 1, 13 ) /
     &   17.8, 19.3, 21.3, 23.,  24.2, 25.4, 27.,  28.8, 30.2,  31.7,
     &   35.8, 38.7, 40.7 /
      DATA ( F51U(9,J), J = 1, 13 ) /
     &   14.8, 16.5, 18.5, 20.,  21.2, 22.4, 23.9, 25.2, 26.6, 27.8,
     &   32.,  35.,  37.3 /
      DATA ( F51U(10,J), J = 1, 13 ) /
     &   12.,  13.4, 15.6, 17.1, 18.3, 19.7, 21.,  22.1, 23.4, 24.6,
     &   28.3, 31.3, 33.8 /
      DATA ( F51U(11,J), J = 1, 13 ) /
     &    9.2, 10.7, 12.7, 14.,  15.2, 16.5, 18.,  19.3, 20.3, 21.3,
     &   24.9, 27.8, 30.3 /
      DATA ( F51U(12,J), J = 1, 13 ) /
     &    6.6,  8.,   9.9, 11.2, 12.6, 13.8, 15.3, 16.4, 17.3, 18.3,
     &   21.7, 24.3, 27. /
      DATA ( F51U(13,J), J = 1, 13 ) /
     &    4.,   5.1,  7.1,  8.8, 10.,  11., 12.5,  13.8, 14.8, 15.7,
     &   18.8, 21.2, 23.7 /
      DATA ( F51U(14,J), J = 1, 13 ) /
     &    1.2,  2.5,  4.4,  6.,  7.3,  8.3,  9.7,  10.9, 11.9, 12.8,
     &   15.9, 18.2, 20.5 /
      DATA ( F51U(15,J), J = 1, 13 ) /
     &   -1.3,  -.2,  1.8,  3.2, 4.6,  5.7,  7.,  8.1,  9.1, 10.,
     &   13.1, 15.5, 17.4 /
      DATA ( F51U(16,J), J = 1, 13 ) /
     &   -3.8, -2.4,  -.8,  .8,  1.9,  3.,  4.4,  5.6,  6.7,  7.6,
     &   10.6, 12.8, 14.7 /
      DATA ( F51U(17,J), J = 1, 13 ) /
     &   -6.,  -4.9,  -3.1,  -1.7,  -.5,  .6,  1.8,  2.9,  3.9,  4.8,
     &    7.9, 10.,  12. /
      DATA ( F51U(18,J), J = 1, 13 ) /
     &   -8.4,  -7.2, -5.5,  -4.1,  -3.,  -2.,  -.7,  .3,  1.3,  2.1,
     &    5.1,  7.3,  9.2 /
      DATA ( F51U(19,J), J = 1, 13 ) /
     &  -10.3,  -9.3,  -7.7,  -6.2,  -5.2,  -4.3,  -3.2,  -2.2,  -1.2,
     &    -.4,  2.2,  4.7,   6.5 /
      DATA ( F51U(20,J), J = 1, 13 ) /
     &  -12.5, -11.3, -9.8, -8.4, -7.4, -6.6, -5.4, -4.5, -3.6, -2.8,
     &    0.,  2.1,  4. /
      DATA ( F51U(21,J), J = 1, 13 ) /
     &  -14.5, -13.5, -12.,  -10.4, -9.6, -8.8, -7.7, -6.7, -5.8, -5.,
     &   -2.2,  0.,  1.8 /
      DATA ( F51U(22,J), J = 1, 13 ) /
     &  -16.5, -15.5, -14.,  -12.7, -11.7, -10.8, -9.8, -8.9, -7.9,
     &   -7.1,  -4.3, -2.2,  -.4 /
      DATA ( F51U(23,J), J = 1, 13 ) /
     &  -18.5, -17.4, -15.9, -14.6, -13.8, -13.,  -12.,  -11.,  -10.,
     &   -9.2,  -6.6,  -4.6,  -2.8 /
      DATA ( F51U(24,J), J = 1, 13 ) /
     &  -20.5, -19.3, -17.8, -16.5, -15.6, -14.9, -14.,  -13., -12.2,
     &  -11.3,  -8.9,  -6.8,  -5. /
      DATA ( F51U(25,J), J = 1, 13 ) /
     &  -22.4, -21.3, -19.8, -18.6, -17.7, -17.,  -16.,  -15., -14.2,
     &  -13.4, -11.,   -8.8,  -7. /
      DATA ( F51U(26,J), J = 1, 13 ) /
     &  -24.2, -23.2, -21.6, -20.4, -19.6, -18.9, -17.9, -17., -16.2,
     &  -15.4, -13.,  -10.8,  -9. /
      DATA ( F51U(27,J), J = 1, 13 ) /
     &  -26.,  -25.,  -23.4, -22.2, -21.3, -20.8, -19.9, -19.1, -18.2,
     &  -17.5, -15.,  -12.9, -11. /
      DATA ( F51U(28,J), J = 1, 13 ) /
     &  -27.8, -27.,  -25.5, -24.2, -23.3, -22.7, -21.8, -21.,  -20.2,
     &  -19.4, -17.,  -14.9, -13. /
      DATA ( F51U(29,J), J = 1, 13 ) /
     &  -29.5, -28.5, -27.1, -26.,  -25.,  -24.4, -23.7, -22.8,  -22.,
     &  -21.3, -19.,  -16.9, -15. /
      DATA ( F51U(30,J), J = 1, 13 ) /
     &  -31.,  -30.1, -28.9, -27.9, -27.,  -26.3, -25.6, -24.8,  -24.,
     &  -23.2, -21.,  -18.9, -16.8 /
!
!! Derived Interfering curve added to smooth out the graph and interpolation
! for the rarely used F(50,10) curve at 500 km

	  DATA ( F51U(31,J), J = 1, 13 )/
     &  -32.5, -31.6, -30.7, -29.8, -29.0, -28.2, -27.5, -26.8, -26.0,
     &  -25.1, -22.9, -20.9, -18.6 /
!
!  FLTC_Metric:  DATA TABLE INITIALIZATION OK, CONTINUE WITH PROGRAM


      IF ( UNIT .EQ. 1 ) THEN
         DO 1 I = 1, NP
            DM(I) = D(I) * 1.609344
            HF(I) = H(I) * .3048
1        CONTINUE
      ELSE IF ( UNIT .EQ. 2 ) THEN
         DO 2 I = 1, NP
            DM(I) = D(I)
            HF(I) = H(I)
2        CONTINUE
      END IF
!
      IF ( FREQ .LT. 108.01 ) THEN
!
         CALL ITPLBV ( 6, 25, 13, D50, H50, F55LV, NP, DM, HF, F5050 )
         CALL ITPLBV ( 6, 31, 13, D10, H10, F51LV, NP, DM, HF, F5010 )
!
      ELSE IF ( FREQ .GT. 470. ) THEN
!
         CALL ITPLBV ( 6, 25, 13, D50, H50, F55U, NP, DM, HF, F5050 )
         CALL ITPLBV ( 6, 31, 13, D10, H10, F51U, NP, DM, HF, F5010 )
!
      ELSE IF ( FREQ .GT. 108.01 .AND. FREQ .LT. 470. ) THEN
!
         CALL ITPLBV ( 6, 25, 13, D50, H50, F55HV, NP, DM, HF, F5050 )
         CALL ITPLBV ( 6, 31, 13, D10, H10, F51HV, NP, DM, HF, F5010 )
!
      END IF
!
      DO 3 I = 1, NP
         IF ( DM(I) .LT. 15. ) F5010(I) = F5050(I)
3     CONTINUE
!
      IF ( L .LT. 49.99 .OR. L .GT. 50.01 ) GO TO 90
      IF ( T .LT. 49.99 .OR. T .GT. 50.01 ) GO TO 82
!
!***********************************************************
!     AN F(50,50) FIELD STRENGTH CURVE HAS BEEN REQUESTED  *
!***********************************************************
!
      DO 4 I = 1, NP
         FS(I) = F5050(I)
4     CONTINUE
      RETURN
!
82    IF ( T .LT. 9.99 .OR. T .GT. 10.01 ) GO TO 90
!
!************************************************************
!     AN F(50,10) FIELD STRENGTH CURVE HAS BEEN REQUESTED   *
!************************************************************
!
      DO 6 I = 1, NP
         FS(I) = F5010(I)
6     CONTINUE
      RETURN
!
!*********************************************************************
!     SOMETHING OTHER THAN 50,50 OR 50,10 HAS BEEN REQUESTED.        *
!     CALCULATE THE LOCATION VARABILITY AND TIME VARABILITY          *
!*********************************************************************
!
90    CALL FZQ ( L, ZQ )
!
      SIGMA = 8.58
      IF ( FREQ .GT. 470. ) SIGMA = 11.88
!
      RL = ZQ * SIGMA
!
      CALL FZQ ( T, ZQ )
!
      DO 7 I = 1, NP
         RT = ( F5010(I) - F5050(I) ) * ZQ / 1.28155
         FS(I) = F5050(I) + RL + RT
7     CONTINUE
!
      RETURN
      END

! ======================================================================
! FZQ.F

      SUBROUTINE FZQ(Q,ZQ)
!
      DIMENSION VGRID(115),ZGRI(58),ZGRID(115)

      DATA VGRID/.01,.02,.03,.04,.05,.06,.07,.08,.09,.1,.15,.2,.3,.4,.5,
     &.6,.7,.8,.9,1.,1.2,1.4,1.6,1.8,2.,3.,4.,5.,6.,7.,8.,9.,10.,11.,12.
     &,13.,14.,15.,16.,17.,18.,19.,20.,22.,24.,26.,28.,30.,32.,34.,36.,3
     &8.,40.,42.,44.,46.,48.,50.,52.,54.,56.,58.,60.,62.,64.,66.,68.,70.
     &,72.,74.,76.,78.,80.,81.,82.,83.,84.,85.,86.,87.,88.,89.,90.,91.,9
     &2.,93.,94.,95.,96.,97.,98.,98.2,98.4,98.6,98.8,99.,99.1,99.2,99.3,
     &99.4,99.5,99.6,99.7,99.8,99.85,99.9,99.91,99.92,99.93,99.94,99.95,
     &99.96,99.97,99.98,99.99/
      DATA ZGRI/-3.71902,-3.54008,-3.43161,-3.35279,-3.29053,-3.23888,-
     &3.19465,-3.15591,-3.12139,-3.09023,-2.96774,-2.87816,-2.74778,-2.6
     &5207,-2.57583,-2.51214,-2.45726,-2.40892,-2.36562,-2.32635,-2.2571
     &3,-2.19729,-2.14441,-2.09693,-2.05375,-1.88079,-1.75069,-1.64485,-
     &1.55477,-1.47579,-1.40507,-1.34076,-1.28155,-1.22653,-1.17499,-1.1
     &2639,-1.08032,-1.03643,-.99446,-.95416,-.91537,-.8779,-.84162,-.77
     &219,-.7063,-.64335,-.58284,-.5244,-.4677,-.41246,-.35846,-.30548,-
     &.25335,-.20189,-.15097,-.10043,-.05015,0.0/
!
      DO 5 I=1, 57
         ZGRID( I ) = -ZGRI( I )
         ZGRID( I + 58 ) = ZGRI( 58 - I )
    5 CONTINUE
      ZGRID( 58 ) = ZGRI( 58 )
      DO 10 I = 1, 115
      IF( VGRID( I ) .LT. Q ) GO TO 10
      PERC = ( Q - VGRID(I-1) )/( VGRID(I)-VGRID(I-1) )
      ZQ = ZGRID( I-1 ) + PERC * ( ZGRID(I) - ZGRID(I-1) )
      RETURN
!
   10 CONTINUE
      WRITE( 6, 100 )
  100 FORMAT( 1X, 23HERROR IN SUBROUTINE FZQ )
      RETURN
      END


! ==================================================================


!    ITPLBV.F




      SUBROUTINE ITPLBV ( IU, LX, LY, X, Y, Z, N, U, V, W )
!

!
!     Subroutine by:
!
!     Akima, Hiroshi, "Algorithm 474, Bivariate Interpolation
!     and Smooth Surface Fitting Based on Local Procedures";
!     COMMUNICATIONS OF THE ACM, January 1974, Volume 17,
!     Number 1. Copyright 1974, Association for Computing
!     Machinery, Inc. General permission to republish, but not
!     for profit, all or part of this material is granted by
!     permission of the Association for Computing Machinery
!     providing that ACM'S copyright notice is given and that
!     reference is made to the publication, and to its date
!     of issue.
!
!*********************************************************************
!
!     See OCE Report "Field Strength Calculation for TV and FM
!     Broadcasting (Computer Program TVFMFS)", FCC/OCE RS76-01,
!     January 1976.
!
      DIMENSION X(LX), Y(LY), Z(LX,LY), U(N), V(N), W(N)
      DIMENSION ZA(5,2), ZB(2,5), ZAB(3,3), ZX(4,4), ZY(4,4), ZXY(4,4)
!
!      EQUIVALENCE ( Z3A1, ZA(1) ), ( Z3A2, ZA(2) ), ( Z3A3, ZA(3) ),
!     &            ( Z3A4, ZA(4) ), ( Z3A5, ZA(5) ), ( Z4A1, ZA(6) ),
!     &            ( Z4A2, ZA(7) ), ( Z4A3, ZA(8) ), ( Z4A4, ZA(9) ),
!     &            ( Z4A5, ZA(10) ), ( Z3B1, ZB(1) ), ( Z3B2, ZB(3) ),
!     &            ( Z3B3, ZB(5) ), ( Z3B4, ZB(7) ), ( Z3B5, ZB(9) ),
!     &            ( Z4B1, ZB(2) ), ( Z4B2, ZB(4) ), ( Z4B3, ZB(6) ),
!     &            ( Z4B4, ZB(8) ), ( Z4B5, ZB(10) ), ( ZA2B2, ZAB(1) ),
!     &            ( ZA3B2, ZAB(2) ), ( ZA4B2, ZAB(3) ),
!     &            ( ZA2B3, ZAB(4) ), ( ZA3B3, ZAB(5) ),
!     &            ( ZA4B3, ZAB(6) ), ( ZA2B4, ZAB(7) ),
!     &            ( ZA3B4, ZAB(8) ), ( ZA4B4, ZAB(9) ),
!     &            ( ZX33, ZX(6) ), ( ZX43, ZX(7) ), ( ZX34, ZX(10) ),
!     &            ( ZX44, ZX(11) ), ( ZY33, ZY(6) ), ( ZY43, ZY(7) ),
!     &            ( ZY34, ZY(10) ), ( ZY44, ZY(11) ), ( ZXY33, ZXY(6) ),
!     &            ( ZXY43, ZXY(7) ), ( ZXY34, ZXY(10) ),
!     &            ( ZXY44, ZXY(11) ), ( P00, Z33 ), ( P01, ZY33 ),
!     &            ( P10, ZX33 ), ( P11, ZXY33 )
!
!      EQUIVALENCE ( LX0, ZX(1) ), ( LXM1, ZX(4) ), ( LXM2, ZX(13) ),
!     &            ( LXP1, ZX(16) ), ( LY0, ZY(1) ), ( LYM1, ZY(4) ),
!     &            ( LYM2, ZY(13) ), ( LYP1, ZY(16) ), ( IX, ZXY(1) ),
!     &            ( IY, ZXY(4) ), ( IXPV, ZXY(13) ), ( IYPV, ZXY(16) ),
!     &            ( IMN, JX ), ( IMX, JY ), ( JXM2, JX1 ),
!     &            ( JYM2, JY1 ), ( UK, DX ), ( VK, DY ),
!     &            ( A1, A5, B1, B5, ZX(2), A, Q0 ),
!     &            ( A2, ZX(5), B, Q1 ), ( A4, ZX(8), C, Q2 ),
!     &            ( B2, ZY(2), D, Q3 ), ( B4, ZY(14), E ),
!     &            ( X2, ZX(3), A3SQ ), ( X4, ZX(9) ), ( X5, ZX(12) ),
!     &            ( Y2, ZX(14) ), ( Y4, ZY(3), B3SQ ),
!     &            ( Y5, ZX(15), P02 ), ( Z23, ZY(5), P03 ),
!     &            ( Z24, ZY(8), P12 ), ( Z32, ZY(9), P13 ),
!     &            ( Z34, ZY(12), P20 ), ( Z35, ZY(15), P21 ),
!     &            ( Z42, ZXY(2), P22 ), ( Z43, ZXY(5), P23 ),
!     &            ( Z44, ZXY(3), P30 ), ( Z45, ZXY(8), P31 ),
!     &            ( Z53, ZXY(9), P32 ), ( Z54, ZXY(12), P33 ),
!     &            ( W2, WY2, W4 ), ( W3, WY3, W1, W5 ),
!     &            ( WX2, ZXY(14) ), ( WX3, ZXY(15) )
!
      EQUIVALENCE (Z3A1, ZA(1,1)), (Z3A2, ZA(2,1)), (Z3A3, ZA(3,1))
      EQUIVALENCE (Z3A4, ZA(4,1)), (Z3A5, ZA(5,1))
      EQUIVALENCE (Z4A1, ZA(1,2)), (Z4A2, ZA(2,2)), (Z4A3, ZA(3,2))
      EQUIVALENCE (Z4A4, ZA(4,2)), (Z4A5, ZA(5,2))

      EQUIVALENCE (Z3B1, ZB(1,1)), (Z3B2, ZB(1,2)), (Z3B3, ZB(1,3))
      EQUIVALENCE (Z3B4, ZB(1,4)), (Z3B5, ZB(1,5))
      EQUIVALENCE (Z4B1, ZB(2,1)), (Z4B2, ZB(2,2)), (Z4B3, ZB(2,3))
      EQUIVALENCE (Z4B4, ZB(2,4)), (Z4B5, ZB(2,5))

      EQUIVALENCE (ZA2B2, ZAB(1,1)), (ZA3B2, ZAB(2,1))
      EQUIVALENCE (ZA4B2, ZAB(3,1))
      EQUIVALENCE (ZA2B3, ZAB(1,2)), (ZA3B3, ZAB(2,2))
      EQUIVALENCE (ZA4B3, ZAB(3,2))
      EQUIVALENCE (ZA2B4, ZAB(1,3)), (ZA3B4, ZAB(2,3))
      EQUIVALENCE (ZA4B4, ZAB(3,3))

      EQUIVALENCE (ZX33, ZX(2,2)), (ZX43, ZX(3,2))
      EQUIVALENCE (ZX34, ZX(2,3)), (ZX44, ZX(3,3))

      EQUIVALENCE (ZY33, ZY(2,2)), (ZY43, ZY(3,2))
      EQUIVALENCE (ZY34, ZY(2,3)), (ZY44, ZY(3,3))

      EQUIVALENCE (ZXY33, ZXY(2,2)), (ZXY43, ZXY(3,2))
      EQUIVALENCE (ZXY34, ZXY(2,3)), (ZXY44, ZXY(3,3))

      EQUIVALENCE (LX0, ZX(1,1)), (LXM1, ZX(4,1))
      EQUIVALENCE (LXM2, ZX(1,4)), (LXP1, ZX(4,4))

      EQUIVALENCE (LY0, ZY(1,1)), (LYM1, ZY(4,1))
      EQUIVALENCE (LYM2, ZY(1,4)), (LYP1, ZY(4,4))

      EQUIVALENCE (IX, ZXY(1,1)), (IY, ZXY(4,1))
      EQUIVALENCE (IXPV, ZXY(1,4)), (IYPV, ZXY(4,4))

      EQUIVALENCE (P00, Z33), (P01, ZY33), (P10, ZX33), (P11, ZXY33)
*
      EQUIVALENCE (JXM2, JX1), (JYM2, JY1)
      EQUIVALENCE (IMN, JX), (IMX, JY)
      EQUIVALENCE (UK, DX), (VK, DY)

      EQUIVALENCE (A1, A5, B1, B5, ZX(2,1), A, Q0)

      EQUIVALENCE (A2, ZX(1,2), B, Q1), (A4, ZX(4,2), C, Q2)
      EQUIVALENCE (X2, ZX(3,1), A3SQ),  (X4, ZX(1,3))
      EQUIVALENCE (X5, ZX(4,3)),        (Y5, ZX(3,4), P02)
      EQUIVALENCE (Y2, ZX(2,4)),        (Y4, ZY(3,1), B3SQ)

      EQUIVALENCE (B2, ZY(2,1), D, Q3), (B4, ZY(2,4), E)
      EQUIVALENCE (W2, WY2, W4), (W3, WY3, W1, W5)

      EQUIVALENCE (WX2, ZXY(2,4))
      EQUIVALENCE (WX3, ZXY(3,4))

      EQUIVALENCE (Z23, ZY(1,2), P03)
      EQUIVALENCE (Z24, ZY(4,2), P12)
      EQUIVALENCE (Z32, ZY(1,3), P13)
      EQUIVALENCE (Z34, ZY(4,3), P20)
      EQUIVALENCE (Z35, ZY(3,4), P21)

      EQUIVALENCE (Z42, ZXY(2,1), P22)
      EQUIVALENCE (Z43, ZXY(1,2), P23)
      EQUIVALENCE (Z44, ZXY(3,1), P30)
      EQUIVALENCE (Z45, ZXY(4,2), P31)
      EQUIVALENCE (Z53, ZXY(1,3), P32)
      EQUIVALENCE (Z54, ZXY(4,3), P33)
      EQUIVALENCE (W2, WY2, W4)
      EQUIVALENCE (W3, WY3, W1, W5)
      EQUIVALENCE (WX2, ZXY(2,4))
      EQUIVALENCE (WX3, ZXY(3,4))
!
      IU0  = IU
      LX0  = LX
      LXM1 = LX0 - 1
      LXM2 = LXM1 - 1
      LXP1 = LX0 + 1
      LY0  = LY
      LYM1 = LY0 - 1
      LYM2 = LYM1 - 1
      LYP1 = LY0 + 1
      N0   = N
!
      IF ( LXM2 .LT. 0 ) GO TO 710
      IF ( LYM2 .LT. 0 ) GO TO 720
      IF ( N0   .LT. 1 ) GO TO 730
!
      DO 10 IX = 2, LX0
         IF ( X(IX-1) - X(IX) ) 10, 740, 750
   10 CONTINUE
!
      DO 20 IY = 2, LY0
         IF ( Y(IY-1) - Y(IY) ) 20, 770, 780
   20 CONTINUE
!
      IXPV = 0
      IYPV = 0
!
      DO 700 K = 1, N0
!
         UK = U(K)
         VK = V(K)
!
         IF ( LXM2 .EQ. 0 ) GO TO 80
         IF ( UK   .GE. X(LX0) ) GO TO 70
         IF ( UK   .LT. X(1)   ) GO TO 60
!
         IMN = 2
         IMX = LX0
   30    IX  = ( IMN + IMX ) / 2
         IF ( UK .GE. X(IX) ) GO TO 40
         IMX = IX
         GO TO 50
!
   40    IMN = IX + 1
   50    IF ( IMX .GT. IMN ) GO TO 30
         IX = IMX
         GO TO 90
!
   60    IX = 1
         GO TO 90
!
   70    IX = LXP1
         GO TO 90
!
   80    IX = 2
   90    IF ( LYM2 .EQ. 0 ) GO TO 150
         IF ( VK .GE. Y(LY0) ) GO TO 140
         IF ( VK .LT. Y(1)   ) GO TO 130
!
         IMN = 2
         IMX = LY0
  100    IY  = ( IMN + IMX ) / 2
         IF ( VK .GE. Y(IY) ) GO TO 110
         IMX = IY
         GO TO 120
!
  110    IMN = IY + 1
  120    IF ( IMX .GT. IMN ) GO TO 100
         IY = IMX
         GO TO 160
!
  130    IY = 1
         GO TO 160
!
  140    IY = LYP1
         GO TO 160
!
  150    IY = 2
  160    IF ( IX .EQ. IXPV .AND.
     &        IY .EQ. IYPV       ) GO TO 690
!
         IXPV = IX
         IYPV = IY
         JX   = IX
         IF ( JX .EQ. 1 )    JX = 2
         IF ( JX .EQ. LXP1 ) JX = LX0
!
         JY = IY
         IF ( JY .EQ. 1 )    JY = 2
         IF ( JY .EQ. LYP1 ) JY = LY0
!
         JXM2 = JX - 2
         JXML = JX - LX0
         JYM2 = JY - 2
         JYML = JY - LY0
!
         X3 = X(JX-1)
         X4 = X(JX)
         A3 = 1.0 / ( X4 - X3 )
!
         Y3 = Y(JY-1)
         Y4 = Y(JY)
         B3 = 1.0 / ( Y4 - Y3 )
!
         Z33 = Z(JX-1,JY-1)
         Z43 = Z(JX,JY-1)
         Z34 = Z(JX-1,JY)
         Z44 = Z(JX,JY)
!
         Z3A3 = ( Z43 - Z33 ) * A3
         Z4A3 = ( Z44 - Z34 ) * A3
         Z3B3 = ( Z34 - Z33 ) * B3
         Z4B3 = ( Z44 - Z43 ) * B3
         ZA3B3 = ( Z4B3 - Z3B3 ) * A3
!
         IF ( LXM2 .EQ. 0 ) GO TO 230
         IF ( JXM2 .EQ. 0 ) GO TO 170
!
         X2 = X(JX-2)
         A2 = 1.0 / ( X3 - X2 )
!
         Z23 = Z(JX-2,JY-1)
         Z24 = Z(JX-2,JY)
         Z3A2 = ( Z33 - Z23 ) * A2
         Z4A2 = ( Z34 - Z24 ) * A2
         IF ( JXML .EQ. 0 ) GO TO 180
!
  170    X5 = X(JX+1)
         A4 = 1.0 / ( X5 - X4 )
         Z53 = Z(JX+1,JY-1)
         Z54 = Z(JX+1,JY)
         Z3A4 = ( Z53 - Z43 ) * A4
         Z4A4 = ( Z54 - Z44 ) * A4
         IF ( JXM2 .NE. 0 ) GO TO 190
!
         Z3A2 = Z3A3 + Z3A3 - Z3A4
         Z4A2 = Z4A3 + Z4A3 - Z4A4
         GO TO 190
!
  180    Z3A4 = Z3A3 + Z3A3 - Z3A2
         Z4A4 = Z4A3 + Z4A3 - Z4A2
!
  190    ZA2B3 = ( Z4A2 - Z3A2 ) * B3
         ZA4B3 = ( Z4A4 - Z3A4 ) * B3
         IF ( JX .LE. 3 ) GO TO 200
!
         A1 = 1.0 / ( X2 -X(JX-3) )
         Z3A1 = ( Z23 - Z(JX-3,JY-1) ) * A1
         Z4A1 = ( Z24 - Z(JX-3,JY)   ) * A1
         GO TO 210
!
  200    Z3A1 = Z3A2 + Z3A2 - Z3A3
         Z4A1 = Z4A2 + Z4A2 - Z4A3
  210    IF ( JX .GE. LXM1 ) GO TO 220
!
         A5 = 1.0 / ( X(JX+2) - X5 )
         Z3A5 = ( Z(JX+2,JY-1) - Z53 ) * A5
         Z4A5 = ( Z(JX+2,JY)   - Z54 ) * A5
         GO TO 240
!
  220    Z3A5 = Z3A4 + Z3A4 - Z3A3
         Z4A5 = Z4A4 + Z4A4 - Z4A3
         GO TO 240
!
  230    Z3A2 = Z3A3
         Z4A2 = Z4A3
         GO TO 180
!
  240    IF ( LYM2 .EQ. 0 ) GO TO 310
         IF ( JYM2 .EQ. 0 ) GO TO 250
!
         Y2 = Y(JY-2)
         B2 = 1.0 / ( Y3 - Y2 )
         Z32 = Z(JX-1,JY-2)
         Z42 = Z(JX,JY-2)
         Z3B2 = ( Z33 - Z32 ) * B2
         Z4B2 = ( Z43 - Z42 ) * B2
         IF ( JYML .EQ. 0 ) GO TO 260
!
  250    Y5 = Y(JY+1)
         B4 = 1.0 / ( Y5 - Y4 )
         Z35 = Z(JX-1,JY+1)
         Z45 = Z(JX,JY+1)
         Z3B4 = ( Z35 - Z34 ) * B4
         Z4B4 = ( Z45 - Z44 ) * B4
         IF ( JYM2 .NE. 0 ) GO TO 270
!
         Z3B2 = Z3B3 + Z3B3 - Z3B4
         Z4B2 = Z4B3 + Z4B3 - Z4B4
         GO TO 270
!
  260    Z3B4 = Z3B3 + Z3B3 - Z3B2
         Z4B4 = Z4B3 + Z4B3 - Z4B2
  270    ZA3B2 = ( Z4B2 - Z3B2 ) * A3
         ZA3B4 = ( Z4B4 - Z3B4 ) * A3
         IF ( JY .LE. 3 ) GO TO 280
!
         B1 = 1.0 / ( Y2 - Y(JY-3) )
         Z3B1 = ( Z32 - Z(JX-1,JY-3) ) * B1
         Z4B1 = ( Z42 - Z(JX,JY-3)   ) * B1
         GO TO 290
!
  280    Z3B1 = Z3B2 + Z3B2 - Z3B3
         Z4B1 = Z4B2 + Z4B2 - Z4B3
  290    IF ( JY .GE. LYM1 ) GO TO 300
!
         B5 = 1.0 / ( Y(JY+2) - Y5 )
         Z3B5 = ( Z(JX-1,JY+2) - Z35 ) * B5
         Z4B5 = ( Z(JX,JY+2)   - Z45 ) * B5
         GO TO 320
!
  300    Z3B5 = Z3B4 + Z3B4 - Z3B3
         Z4B5 = Z4B4 + Z4B4 - Z4B3
         GO TO 320
!
  310    Z3B2 = Z3B3
         Z4B2 = Z4B3
         GO TO 260
!
  320    IF ( LXM2 .EQ. 0 ) GO TO 400
         IF ( LYM2 .EQ. 0 ) GO TO 410
         IF ( JXML .EQ. 0 ) GO TO 350
         IF ( JYM2 .EQ. 0 ) GO TO 330
!
         ZA4B2 = ( ( Z53 - Z(JX+1,JY-2) ) * B2 - Z4B2 ) * A4
         IF ( JYML .EQ. 0 ) GO TO 340
!
  330    ZA4B4 = ( ( Z(JX+1,JY+1) - Z54 ) * B4 - Z4B4 ) * A4
         IF ( JYM2 .NE. 0 ) GO TO 380
!
         ZA4B2 = ZA4B3 + ZA4B3 - ZA4B4
         GO TO 380
!
  340    ZA4B4 = ZA4B3 + ZA4B3 - ZA4B2
         GO TO 380
!
  350    IF ( JYM2 .EQ. 0 ) GO TO 360
!
         ZA2B2 = ( Z3B2 - ( Z23 - Z(JX-2,JY-2) ) * B2 ) * A2
         IF ( JYML .EQ. 0 ) GO TO 370
!
  360    ZA2B4 = ( Z3B4 - ( Z(JX-2,JY+1) - Z24 ) * B4 ) * A2
         IF ( JYM2 .NE. 0 ) GO TO 390
!
         ZA2B2 = ZA2B3 + ZA2B3 - ZA2B4
         GO TO 390
!
  370    ZA2B4 = ZA2B3 + ZA2B3 - ZA2B2
         GO TO 390
!
  380    IF ( JXM2 .NE. 0 ) GO TO 350
!
         ZA2B2 = ZA3B2 + ZA3B2 - ZA4B2
         ZA2B4 = ZA3B4 + ZA3B4 - ZA4B4
         GO TO 420
!
  390    IF ( JXML .NE. 0 ) GO TO 420
!
         ZA4B2 = ZA3B2 + ZA3B2 - ZA2B2
         ZA4B4 = ZA3B4 + ZA3B4 - ZA2B4
         GO TO 420
!
  400    ZA2B2 = ZA3B2
         ZA4B2 = ZA3B2
         ZA2B4 = ZA3B4
         ZA4B4 = ZA3B4
         GO TO 420
!
  410    ZA2B2 = ZA2B3
         ZA2B4 = ZA2B3
         ZA4B2 = ZA4B3
         ZA4B4 = ZA4B3
!
  420    DO 480 JY = 2, 3
!
            DO 470 JX = 2, 3
!
               W2 = ABS ( ZA(JX+2,JY-1) - ZA(JX+1,JY-1) )
               W3 = ABS ( ZA(JX,JY-1)   - ZA(JX-1,JY-1) )
               SW = W2 + W3
               IF ( SW .LT. .0000001 ) GO TO 430
!
               WX2 = W2 / SW
               WX3 = W3 / SW
               GO TO 440
!
  430          WX2 = 0.5
               WX3 = 0.5
  440          ZX(JX,JY) = WX2 * ZA(JX,JY-1) + WX3 * ZA(JX+1,JY-1)
               W2 = ABS ( ZB(JX-1,JY+2) - ZB(JX-1,JY+1) )
               W3 = ABS ( ZB(JX-1,JY)   - ZB(JX-1,JY-1) )
               SW = W2 + W3
               IF ( SW .LT. .0000001 ) GO TO 450
!
               WY2 = W2 / SW
               WY3 = W3 / SW
               GO TO 460
!
  450          WY2 = 0.5
               WY3 = 0.5
  460          ZY(JX,JY)  = WY2 * ZB(JX-1,JY) + WY3 * ZB(JX-1,JY+1)
               ZXY(JX,JY) = WY2 * ( WX2 * ZAB(JX-1,JY-1) + WX3 *
     &                      ZAB(JX,JY-1) ) + WY3 * ( WX2 *
     &                      ZAB(JX-1,JY) + WX3 * ZAB(JX,JY) )
!
  470          CONTINUE
!
  480       CONTINUE
!
         IF ( IX .EQ. LXP1 ) GO TO 530
         IF ( IX .NE. 1    ) GO TO 590
!
         W2 = A4 * ( 3.0 * A3 +A4 )
         W1 = 2.0 * A3 * ( A3 - A4 ) + W2
!
         DO 500 JY = 2, 3
!
            ZX(1,JY) = ( W1 * ZA(1,JY-1) + W2 * ZA(2,JY-1) ) / (W1+W2)
            ZY(1,JY) = ZY(2,JY) + ZY(2,JY) - ZY(3,JY)
            ZXY(1,JY) = ZXY(2,JY) + ZXY(2,JY) - ZXY(3,JY)
!
            DO 490 JX1 = 2, 3
!
               JX = 5 - JX1
               ZX(JX,JY) = ZX(JX-1,JY)
               ZY(JX,JY) = ZY(JX-1,JY)
               ZXY(JX,JY) = ZXY(JX-1,JY)
!
  490       CONTINUE
!
  500    CONTINUE
!
         X3 = X3 - 1.0 / A4
         Z33 = Z33 -Z3A2 / A4
!
         DO 510 JY = 1, 5
            ZB(2,JY) = ZB(1,JY)
  510    CONTINUE
!
         DO 520 JY = 2, 4
            ZB(1,JY) = ZB(1,JY) - ZAB(1,JY-1) / A4
  520    CONTINUE
!
         A3 = A4
         JX = 1
         GO TO 570
!
  530    W4 = A2 * ( 3.0 * A3 + A2 )
         W5 = 2.0 * A3 * ( A3 - A2 ) + W4
!
         DO 550 JY = 2, 3
!
            ZX(4,JY) = ( W4 * ZA(4,JY-1) + W5 * ZA(5,JY-1) ) / (W4+W5)
            ZY(4,JY)  = ZY(3,JY)  + ZY(3,JY)  - ZY(2,JY)
            ZXY(4,JY) = ZXY(3,JY) + ZXY(3,JY) - ZXY(2,JY)
!
            DO 540 JX = 2, 3
!
               ZX(JX,JY)  = ZX(JX+1,JY)
               ZY(JX,JY)  = ZY(JX+1,JY)
               ZXY(JX,JY) = ZXY(JX+1,JY)
!
  540       CONTINUE
!
  550    CONTINUE
!
         X3  = X4
         Z33 = Z43
         DO 560 JY = 1, 5
            ZB(1,JY) = ZB(2,JY)
  560    CONTINUE
!
         A3 = A2
         JX = 3
  570    ZA(3,1) = ZA(JX+1,1)
         DO 580 JY = 1, 3
            ZAB(2,JY) = ZAB(JX,JY)
  580    CONTINUE
  590    IF ( IY .EQ. LYP1 ) GO TO 630
         IF ( IY .NE. 1    ) GO TO 680
!
         W2 = B4 * ( 3.0 * B3 + B4 )
         W1 = 2.0 * B3 * ( B3 - B4 ) + W2
!
         DO 620 JX = 2, 3
!
            IF ( JX .EQ. 3 .AND. IX .EQ. LXP1 ) GO TO 600
            IF ( JX .EQ. 2 .AND. IX .EQ. 1    ) GO TO 600
!
            ZY(JX,1) = ( W1 * ZB(JX-1,1) + W2 * ZB(JX-1,2) ) / (W1+W2)
            ZX(JX,1)  = ZX(JX,2)  + ZX(JX,2)  - ZX(JX,3)
            ZXY(JX,1) = ZXY(JX,2) + ZXY(JX,2) - ZXY(JX,3)
!
  600       DO 610 JY1 = 2, 3
!
               JY = 5 - JY1
               ZY(JX,JY)  = ZY(JX,JY-1)
               ZX(JX,JY)  = ZX(JX,JY-1)
               ZXY(JX,JY) = ZXY(JX,JY-1)
!
  610       CONTINUE
!
  620    CONTINUE
!
         Y3   = Y3   - 1.0   / B4
         Z33  = Z33  - Z3B2  / B4
         Z3A3 = Z3A3 - ZA3B2 / B4
         Z3B3 = Z3B2
         ZA3B3 = ZA3B2
         B3    = B4
         GO TO 670
!
  630    W4 = B2 * ( 3.0 * B3 + B2 )
         W5 = 2.0 * B3 * ( B3 - B2 ) + W4
!
         DO 660 JX = 2, 3
!
            IF ( JX .EQ. 3 .AND. IX .EQ. LXP1 ) GO TO 640
            IF ( JX .EQ. 2 .AND. IX .EQ. 1    ) GO TO 640
!
            ZY(JX,4) = ( W4 * ZB(JX-1,4) + W5 * ZB(JX-1,5) ) / (W4+W5)
            ZX(JX,4)  = ZX(JX,3)  + ZX(JX,3)  - ZX(JX,2)
            ZXY(JX,4) = ZXY(JX,3) + ZXY(JX,3) - ZXY(JX,2)
!
  640       DO 650 JY = 2, 3
!
               ZY(JX,JY) = ZY(JX,JY+1)
               ZX(JX,JY) = ZX(JX,JY+1)
               ZXY(JX,JY) = ZXY(JX,JY+1)
!
  650       CONTINUE
!
  660    CONTINUE
!
         Y3    = Y4
         Z33   = Z33  + Z3B3  / B3
         Z3A3  = Z3A3 + ZA3B3 / B3
         Z3B3  = Z3B4
         ZA3B3 = ZA3B4
         B3    = B2
  670    IF ( IX .NE. 1 .AND. IX .NE. LXP1 ) GO TO 680
!
         JX  = IX / LXP1 + 2
         JX1 = 5 - JX
         JY  = IY / LYP1 + 2
         JY1 = 5 - JY
         ZX(JX,JY)  = ZX(JX1,JY)  + ZX(JX,JY1)  - ZX(JX1,JY1)
         ZY(JX,JY)  = ZY(JX1,JY)  + ZY(JX,JY1)  - ZY(JX1,JY1)
         ZXY(JX,JY) = ZXY(JX1,JY) + ZXY(JX,JY1) - ZXY(JX1,JY1)
!
  680    ZX3B3 = ( ZX34 - ZX33 ) * B3
         ZX4B3 = ( ZX44 - ZX43 ) * B3
         ZY3A3 = ( ZY43 - ZY33 ) * A3
         ZY4A3 = ( ZY44 - ZY34 ) * A3
!
         A = ZA3B3 - ZX3B3 - ZY3A3 + ZXY33
         B = ZX4B3 - ZX3B3 - ZXY43 + ZXY33
         C = ZY4A3 - ZY3A3 - ZXY34 + ZXY33
         D = ZXY44 - ZXY43 - ZXY34 + ZXY33
!
         E = A + A - B - C
!
         A3SQ = A3 * A3
         B3SQ = B3 * B3
!
         P02 = ( 2.0 * ( Z3B3 - ZY33 ) + Z3B3 - ZY34 ) * B3
         P03 = ( -2.0 * Z3B3 + ZY34 + ZY33 ) * B3SQ
!
         P12 = ( 2.0 * ( ZX3B3 - ZXY33 ) + ZX3B3 - ZXY34 ) * B3
         P13 = ( -2.0 * ZX3B3 + ZXY34 + ZXY33 ) * B3SQ
!
         P20 = ( 2.0 * ( Z3A3 - ZX33 )   + Z3A3  - ZX43 )  * A3
         P21 = ( 2.0 * ( ZY3A3 - ZXY33 ) + ZY3A3 - ZXY43 ) * A3
!
         P22 = ( 3.0 * ( A + E ) + D ) * A3 * B3
         P23 = ( -3.0 * E - B - D ) * A3 * B3SQ
!
         P30 = ( -2.0 * Z3A3  + ZX43  + ZX33 )  * A3SQ
         P31 = ( -2.0 * ZY3A3 + ZXY43 + ZXY33 ) * A3SQ
!
         P32 = ( -3.0 * E - C - D ) * B3 * A3SQ
         P33 = ( D + E + E ) * A3SQ * B3SQ
!
  690    DY = VK - Y3
         Q0 = P00 + DY * ( P01 + DY * ( P02 + DY * P03 ) )
         Q1 = P10 + DY * ( P11 + DY * ( P12 + DY * P13 ) )
         Q2 = P20 + DY * ( P21 + DY * ( P22 + DY * P23 ) )
         Q3 = P30 + DY * ( P31 + DY * ( P32 + DY * P33 ) )
!
         DX = UK - X3
         W(K) = Q0 + DX * ( Q1 + DX * ( Q2 + DX * Q3 ) )
!
  700 CONTINUE
!
      RETURN

  710 WRITE ( IU0, 9999 )
      GOTO 800
!
  720 WRITE ( IU0, 9998 )
      GOTO 800
!
  730 WRITE ( IU0, 9997 )
      GOTO 800
!
  740 WRITE ( IU0, 9996 )
      GOTO 760
!
  750 WRITE ( IU0, 9995 )
  760 WRITE ( IU0, 9994 ) IX, X(IX)
      GOTO 800
!
  770 WRITE ( IU0, 9993 )
      GOTO 790
!
  780 WRITE ( IU0, 9992 )
  790 WRITE ( IU0, 9991 ) IY, Y(IY)
  800 WRITE ( IU0, 9990 ) LX0, LY0, N0
!
      RETURN
!
 9999 FORMAT ( 1X / 22H       LX = 1 OR LESS. / )
 9998 FORMAT ( 1X / 22H       LY = 1 OR LESS. / )
 9997 FORMAT ( 1X / 21H       N = 0 OR LESS. / )
 9996 FORMAT ( 1X / 26H       IDENTICAL X VALUES. / )
 9995 FORMAT ( 1X / 32H       X VALUES OUT OF SEQUENCE. / )
 9994 FORMAT ( 7H   IX =, I6, 10X, 7HX(IX) =, E12.3 )
 9993 FORMAT ( 1X / 26H       IDENTICAL Y VALUES. / )
 9992 FORMAT ( 1X / 32H       Y VALUES OUT OF SEQUENCE. / )
 9991 FORMAT ( 7H   IY =, I6, 10X, 7HY(IY) =, E12.3 )
 9990 FORMAT ( 7H   LX =, I6, 10X, 4HLY =, I6, 10X, 3HN =, I7 /
     &        15H ERROR DETECTED, 20HIN ROUTINE    ITPLBV )
!
      END


! ======================================================================
!  LEFTJUST.F

      subroutine leftjust (string)
!
!     Subroutine by John Boursy, July 1980.
!
!     This subroutine is designed to left-justify a string of
!     characters.  A blank string is treated as though it is already
!     left-justified.
!
!     Here is a description of the argument:
!
!        string -- input/output; character; the string to be left-
!                  justified, on input; the left-justified string,
!                  on output.
!
!     ******************************************************************
!
!     The following statement is the first statement.
!
!     ******************************************************************
!
      character *(*) string


      if (string.eq.' ') return   ! don't do anything if all spaces

      if (string(1:1).ne.' ') return   ! already left-justified

      len_string=len(string)           ! length of the string

      do 100 loop=1,len_string,1   ! look for 1st non-blank char.
      if (string(loop:loop).ne.' ') go to 200
 100  continue

!     We should never have a normal termination of this do loop, but if
!     we do, it means the string is all blanks, so we return.

      return

 200  continue   ! we have now found the first non-blank characterc
      non_blank=len_string-loop+1

      string(1:non_blank)=string(loop:len_string)

      string(non_blank+1:len_string)=' '

      return
      end



! =======================================================================

!  LENGTH.F:

!
!     Function by John Boursy, January 1984.
!
!     This function receives a character string, and returns its length
!     as an integer.  Note:  this is different from the intrinsic LEN
!     function in FORTRAN.  This function LENGTH returns the length of
!     the string out to the last non-blank character, while LEN returns
!     the entire length of the string (including blanks).
!
      function length(string)
!
      character string*(*)
!
      length = len(string)
! move back from end of string
      do 100 loop = length, 1, -1
      if (string(loop:loop) .ne. ' ') goto 200
  100 continue
! completely blank string

      length = 0
!
      return

  200 continue
      length = loop
      return
      end



! ==========================================================================
! ROUND.F

      SUBROUTINE ROUND(A,B)
!
!..THIS SUBROUTINE ROUNDS ANY FLOATING POINT NUMBER ,A, TO THE
!..NEAREST DECIMAL PLACE INDICATED BY ,B, FOR EXAMPLE;
!..  B=1.  ROUNDS A TO THE NEAREST WHOLE NUMBER
!..  B=.1  ROUNDS A TO THE NEAREST TENTH
!
      A = A/B
      A = ANINT(A)
      A = A*B
      RETURN
      END

! =======================================================================
!  ROUND_POWER.F:

!
!***********************************************************************
!
      SUBROUTINE ROUND_POWER ( POWER_IN, POWER_OUT, ERROR_FLAG )
!
!***********************************************************************
!
!     This subroutine will round the power in accordance with the FCC
!     Rules section 73.212.
!
!     POWER_IN   = Unrounded power in Watts or kilowatts; real; input.
!     POWER_OUT  = Rounded power in Watts or kilowatts; real; output.
!     ERROR_FLAG = 0; no errors; integer; output.
!                = 1; Input power is less than minimum allowed,
!                     POWER_OUT set equal to POWER_IN.
!                = 2; Input power greater than maximum allowed,
!                     POWER_OUT set equal to POWER_IN.
!
!                     ...kalagian...11/3/86...
!
!***********************************************************************
!
      REAL POWER_IN, POWER_OUT
!
      INTEGER ERROR_FLAG
!
      ERROR_FLAG = 0
      POWER_OUT = POWER_IN + 0.00001
!
      IF ( POWER_IN .LT. 0.01 ) THEN
!
         ERROR_FLAG = 1
!
      ELSE IF ( POWER_IN .GE. 0.01 .AND. POWER_IN .LT. 0.03 ) THEN
!
         CALL ROUND ( POWER_OUT, .0005 )
!
      ELSE IF ( POWER_IN .GE. 0.03 .AND. POWER_IN .LT. 0.1  ) THEN
!
         CALL ROUND ( POWER_OUT, .001  )
!
      ELSE IF ( POWER_IN .GE. 0.1  .AND. POWER_IN .LT. 0.3  ) THEN
!
         CALL ROUND ( POWER_OUT, .005  )
!
      ELSE IF ( POWER_IN .GE. 0.3  .AND. POWER_IN .LT. 1.0  ) THEN
!
         CALL ROUND ( POWER_OUT, .01   )
!
      ELSE IF ( POWER_IN .GE. 1.0  .AND. POWER_IN .LT. 3.0  ) THEN
!
         CALL ROUND ( POWER_OUT, .05   )
!
      ELSE IF ( POWER_IN .GE. 3.0  .AND. POWER_IN .LT. 10.0 ) THEN
!
         CALL ROUND ( POWER_OUT, 0.1   )
!
      ELSE IF ( POWER_IN .GE. 10.0 .AND. POWER_IN .LT. 30.0 ) THEN
!
         CALL ROUND ( POWER_OUT, 0.5   )
!
      ELSE IF ( POWER_IN .GE. 30.0 .AND. POWER_IN .LT. 100.0 ) THEN
!
         CALL ROUND ( POWER_OUT, 1.0   )
!
      ELSE IF ( POWER_IN .GE. 100. .AND. POWER_IN .LT. 300. ) THEN
!
         CALL ROUND ( POWER_OUT, 5.0   )
!
      ELSE IF ( POWER_IN .GE. 300. .AND. POWER_IN .LE. 1000. ) THEN
!
         CALL ROUND ( POWER_OUT, 10.0  )
!
      ELSE IF ( POWER_IN .GT. 1000. ) THEN
!
         ERROR_FLAG = 2
!
      END IF
!
      RETURN
      END

*
***********************************************************************
*
      SUBROUTINE STOP_NEW_BACK ( STRING, *, *, * )
*
***********************************************************************
*                                                                     *
*  THIS SUBROUTINE DETERMINES IF STRING CONTAINS "STOP", "NEW", OR    *
*  "BACK" . A RETURN IS TREATED AS "STOP".                            *
*                                                                     *
*  NORMAL RETURN IF STRING IS NOT "STOP" "NEW" OR "BACK"              *
*                                                                     *
*  1ST ABNORMAL RETURN IF STRING IS "STOP" OR "S"                     *
*  2ND    "       "    "    "     " "NEW"  OR "N"                     *
*  3RD    "       "    "    "     " "BACK" OR "B"                     *
*                                                                     *
*                       ...KALAGIAN...4/19/85...                      *
*                                                                     *
***********************************************************************
*
      CHARACTER*(*) STRING

	  CALL upper(string)
*
      IF ( STRING .EQ. 'STOP' .OR.
     &     STRING .EQ. 'S'    .OR.
     &     STRING .EQ. ' '           ) RETURN 1
*
      IF ( STRING .EQ. 'NEW' .OR.
     &     STRING .EQ. 'N'           ) RETURN 2
*
      IF ( STRING .EQ. 'BACK' .OR.
     &     STRING .EQ. 'B'           ) RETURN 3
*
      RETURN
      END


! =======================================================================

! =======================================================================

! TVFMFS_METRIC.F:

!
!
!                                                                      *
!     BASED ON "FIELD STRENGTH CALCULATIONS FOR TV AND FM
!
!     BROADCASTING", BY GARY S. KALAGIAN, REPORT NO. RS 76-01,         *
!     JANUARY 1976.                                                    *
!     MODIFIED BY GARY KALAGIAN TO CONVERT TO METRIC UNITS

!
!                                                                      *
!                                                                      *
!     FOLLOWING IS A DESCRIPTION OF THE ARGUMENTS:                     *
!                                                                      *
!          ERP -- EFFECTIVE RADIATED POWER, IN KILOWATTS               *
!                                                                      *
!         HAAT -- ANTENNA HEIGHT ABOVE AVERAGE TERRAIN, IN METERS

!
!                                                                      *
!      CHANNEL -- FM OR TV CHANNEL NUMBER                              *
!                                                                      *
!        FIELD -- FIELD STRENGTH DBU, INPUT OR OUTPUT, DEPENDS ON
!
!                 VALUE OF SWITCH                                      *
!                                                                      *
!     DISTANCE -- DISTANCE TO ARGUMENT "FIELD", IN KILOMETERS, INPUT

!
!                 OR OUTPUT, DEPENDS ON VALUE OF SWITCH                *
!                                                                      *
!       SWITCH -- 1 MEANS "FIELD" IS COMPUTED AT THE INPUT VALUE       *
!                   FOR "DISTANCE".                                    *
!                                                                      *
!                 2 MEANS "DISTANCE" TO THE INPUT VALUE OF "FIELD"     *
!                   IS COMPUTED.                                       *
!                                                                      *
!        CURVE -- 0 MEANS F(50,50) FIELD STRENGTH CURVES ARE USED.     *
!                                                                      *
!                 1 MEANS F(50,10) FIELD STRENGTH CURVES ARE USED.     *
!                                                                      *
!         FLAG -- A TWO CHARACTER ERROR CODE, VALUES ARE:              *
!                                                                      *
!                 'A1' = FREE SPACE EQUATION USED TO FIND REQUESTED    *
!                        ARGUMENT.                                     *
!                                                                      *
!                 'A2' = DISTANCE EXCEEDS GREATEST VALUE ON CURVES.    *
!                                                                      *
!                 'A3' = INVALID CHANNEL NUMBER.                       *
!                                                                      *
!                 'A4' = INVALID CURVE SELECTED.                       *
!                                                                      *
!                 'A5' = INVALID SWITCH VALUE.                         *
!                                                                      *
!                 'A6' = ERP LESS THAN OR EQUAL TO 0 KILOWATTS.        *
!                                                                      *
!                 'A7' = HAAT LESS THAN 30 METERS, SET TO 30 METERS.   *
!                                                                      *
!                 'A8' = HAAT EXCEEDS 1600 METERS, SET TO 1600 METERS. *
!                                                                      *
!                 'A9' = INVALID "DISTANCE" VALUE FOR SWITCH = 1.      *
!                                                                      *
!                 '  ' = NORMAL RETURN.                                *
!                                                                      *
!***********************************************************************
!
      subroutine tvfmfs_metric(erp, haat, channel, field, distance,
     &switch, curve, flag)
      real range
      parameter (range = 100.)
      real delta
      parameter (delta = 0.5)
      integer*4 n_points
      parameter (n_points = 201)
      integer*4 id50
      parameter (id50 = 25)
      integer*4 ih50
      parameter (ih50 = 13)
      integer*4 id10
      parameter (id10 = 31)
!
      integer*4 ih10
      parameter (ih10 = 13)
!
      dimension d50(id50), h50(ih50), d10(id10), h10(ih10), f55lv(id50,
     &ih50), f51lv(id10, ih10), f55hv(id50, ih50), f51hv(id10, ih10),
     &f55u(id50, ih50), f51u(id10, ih10), d(n_points), h(n_points), f(
     &n_points)
!
      character flag*2
!
      integer channel, switch, curve, curve_2
!
!
! **************************************************
!  TVFMFS:   SET UP TVFMFS ARRAYS.

!     D50 IN TVFMFS

       D50(1)=   1.609344
       D50(2)=   3.218688
       D50(3)=   4.828032
       D50(4)=   6.437376
       D50(5)=   8.046720
       D50(6)=   16.09344
       D50(7)=   32.18688
       D50(8)=   48.28032
       D50(9)=   64.37376
       D50(10)=  80.46720
       D50(11)=  96.56064
       D50(12)= 112.65408
       D50(13)= 128.74752
       D50(14)=  144.84096
       D50(15)=  160.93440
       D50(16)=  177.02784
       D50(17)=  193.12128
       D50(18)=  209.21472
       D50(19)=  225.30816
       D50(20)=  241.40160
       D50(21)=  257.49504
       D50(22)=  273.58848
       D50(23)=  289.68192
       D50(24)=  305.77536
       D50(25)=  321.86880

!
!      D10 IN TVFMFS

        D10(1)=16.09344
        D10(2)=32.18688
        D10(3)=48.28032
        D10(4)=64.37376
        D10(5)=80.46720
        D10(6)=96.56064
        D10(7)=112.65408
        D10(8)=128.74752
        D10(9)=144.84096
        D10(10)=160.93440
        D10(11)=177.02784
        D10(12)=193.12128
        D10(13)=209.21472
        D10(14)=225.30816
        D10(15)=241.40160
        D10(16)=257.49504
        D10(17)=273.58848
        D10(18)=289.68192
        D10(19)=305.77536
        D10(20)=321.86880
        D10(21)=337.96224
        D10(22)=354.05568
        D10(23)=370.14912
        D10(24)=386.24256
        D10(25)=402.33600
        D10(26)=418.42944
        D10(27)=434.52288
        D10(28)=450.61632
        D10(29)=466.70976
        D10(30)=482.80320

! Distance of D10(31) added to smooth out the graph and interpolation
! for the rarely used F(50,10) curve at 500 km

        D10(31)=498.89644


!
!       H10, H50 IN TVFMFS

         H10(1)=30.48
         H10(2)=60.96
         H10(3)=121.92
         H10(4)=182.88
         H10(5)=243.84
         H10(6)=304.80
         H10(7)=381.00
         H10(8)=457.20
         H10(9)=533.40
         H10(10)=609.60
         H10(11)=914.40
         H10(12)=1219.20
         H10(13)=1524.00

         H50(1)=30.48
         H50(2)=60.96
         H50(3)=121.92
         H50(4)=182.88
         H50(5)=243.84
         H50(6)=304.80
         H50(7)=381.00
         H50(8)=457.20
         H50(9)=533.40
         H50(10)=609.60
         H50(11)=914.40
         H50(12)=1219.20
         H50(13)=1524.00



!
!
!***********************************************************************
!                                                                      *
!  F(50,50) FIELD STRENGTH DATA FOR THE LOW VHF PROPAGATION
!  CURVE.  (FM AND TV CHANNELS 2 THRS 6 )                                  *
!***********************************************************************

       DATA  ( F55LV(1,J), J = 1, 13 ) /
     &     92., 98., 100.6, 101.5, 101.9, 102., 102.1, 102.2, 102.3,
     &     102.4, 102.5, 102.5, 102.5 /
       DATA  ( F55LV(2,J), J = 1, 13 ) /
     &     79.7, 85.9, 91., 93.4, 94.6, 95., 95.6, 95.9, 96., 96.1,
     &     96.3, 96.5, 96.5 /
       DATA ( F55LV(3,J), J = 1, 13 ) /
     &     72.7, 79.,  84.8, 87.8, 89.4, 90.4, 91.2, 91.8, 92., 92.2,
     &     92.5, 92.5, 92.5 /
       DATA (  F55LV(4,J), J = 1, 13 ) /
     &     67.8, 73.8, 80.,  83.3, 85.4, 86.8, 87.7, 88.3, 88.9, 89.2,
     &     89.9, 90.1, 90.2 /
       DATA ( F55LV(5,J), J = 1, 13 ) /
     &     64.,  70.,  76.,  79.6, 82.,  83.7,  85., 85.8, 86.3, 86.7,
     &     87.6, 88.,  88.1 /
       DATA ( F55LV(6,J), J = 1, 13 ) /
     &     52.,  58.,  64.,  67.6, 70.,  72.,  73.9, 75.4, 76.7, 77.9,
     &     80.2, 81.3, 81.9 /
       DATA ( F55LV(7,J), J = 1, 13 ) /
     &     39.4, 45.5, 51.5, 55.,  57.6, 59.6, 61.7, 63.3, 64.9, 66.2,
     &     70.,  72.4, 74.2 /
       DATA (  F55LV(8,J), J = 1, 13 ) /
     &     31.,  37.,  43.,  46.7, 49.,  51.,  53.2, 55.1, 57., 58.5,
     &     62.6, 65.,  66.5 /
       DATA ( F55LV(9,J), J = 1, 13 ) /
     &     25.3, 29.5, 35.5, 39.,  41.5, 43.6, 45.9, 47.9, 50.,  51.5,
     &     55.4, 57.8, 59.6 /
       DATA ( F55LV(10,J), J = 1, 13 ) /
     &     20.3, 23.5, 28.8, 32.,  34.4, 36.7, 39.1, 41.5, 43.5, 45.,
     &     48.9, 51.2, 53. /
       DATA ( F55LV(11,J), J = 1, 13 ) /
     &     16.2, 18.1, 22.,  25.3, 27.7, 29.9, 32.,  34.4, 36.7, 38.2,
     &     42.5, 44.9, 46.4 /
       DATA ( F55LV(12,J), J = 1, 13 ) /
     &     12.8, 14.5, 17.1, 19.8, 22.,  23.9, 26.,  28.3, 30.7, 32.4,
     &     36.9, 39.1, 40.8 /
       DATA ( F55LV(13,J), J = 1, 13 ) /
     &      9.8, 11.,  13.4, 15.2, 17.,  18.8, 21.,  23.2, 25.2, 27.,
     &     31.,  33.2, 35. /
       DATA ( F55LV(14,J), J = 1, 13 ) /
     &      6.9,  8.2, 10.2, 11.8, 13.1, 14.7, 16.8, 18.8, 20.4, 22.,
     &     25.7, 28.1, 30. /
       DATA (  F55LV(15,J), J = 1, 13 ) /
     &      4.,   5.5,  7.4,  8.9, 10.1, 11.5, 13.1, 14.9, 16.,  17.3,
     &     21.,  23.5, 25.5 /
       DATA ( F55LV(16,J), J = 1, 13 ) /
     &      1.5,  2.9,  4.8,  6.,   7.2,  8.4,  9.9, 11.1, 12.5, 13.7,
     &     17.1, 19.8, 21.8 /
       DATA (  F55LV(17,J), J = 1, 13 ) /
     &     -1.1,   .3,  2.2,  3.7,  4.8,  5.7,  7.,   8.,   9.1, 10.1,
     &     13.6, 16.1, 18.3 /
       DATA ( F55LV(18,J), J = 1, 13 ) /
     &     -3.6, -2.2,  -.3,  1.,   2.,   3.,   4.1,  5.2,  6.2,  7.1,
     &     10.3, 13.,  15. /
       DATA ( F55LV(19,J), J = 1, 13 ) /
     &     -5.8, -4.8, -3.,  -1.4,  -.3,   .6,  1.7,  2.7,  3.8,  4.6,
     &      7.8, 10.4, 12.4 /
       DATA ( F55LV(20,J), J = 1, 13 ) /
     &     -8.1, -7.,  -5.2, -3.9, -2.7, -1.8,  -.7,   .2,  1.1,  2.,
     &      5.1,  8.,  10. /
       DATA ( F55LV(21,J), J = 1, 13 ) /
     &    -10.6, -9.4, -7.6, -6.1, -5.1, -4.2, -3.2, -2.2, -1.3,  -.4,
     &      2.8,  5.5,  7.7 /
       DATA ( F55LV(22,J), J = 1, 13 ) /
     &    -13., -11.7, -10., -8.7, -7.6, -6.6, -5.6, -4.6, -3.6, -2.7,
     &       .5,  3.1,   5.1 /
       DATA (  F55LV(23,J), J = 1, 13 ) /
     &    -15.1, -14., -12.2, -11., -10., -9., -8.,  -7.,  -6.1, -5.1,
     &     -2.1,   .6,   2.8 /
       DATA ( F55LV(24,J), J = 1, 13 ) /
     &    -17.2, -16.1, -14.6, -13.2, -12.1, -11.2, -10.2, -9.2, -8.4,
     &     -7.6,  -4.5,  -2.,     .2 /
       DATA ( F55LV(25,J), J = 1, 13 ) /
     &    -19.2, -18.3, -16.9, -15.6, -14.6, -13.6, -12.5, -11.6,
     &    -10.6, -10.,   -6.8,  -4.1,  -2. /
!
!
!***********************************************************************
!                                                                      *
!  F(50,10) FIELD STRENGTH DATA FOR THE LOW VHF PROPAGATION
!  CURVE.  (FM AND TV CHANNELS 2 THRS 6 )                                  *
!***********************************************************************
!

      DATA ( F51LV(1,J), J = 1, 13 ) /
     &   52.2, 58.4, 64.3, 68.,  70.5, 72.3, 74.2, 75.9, 77.,  78.2,
     &   80.8, 81.8, 82.2 /
      DATA ( F51LV(2,J), J = 1, 13 ) /
     &   41.4, 47.,  53.,  56.5, 59.,  60.9, 63.,  64.8, 66.2, 67.6,
     &   71.2, 73.8, 75.5 /
      DATA ( F51LV(3,J), J = 1, 13 ) /
     &   36.4, 40.9, 45.9, 49.,  51.7, 53.7, 56.,  57.9, 59.6, 60.9,
     &   64.5, 67.,  69. /
      DATA ( F51LV(4,J), J = 1, 13 ) /
     &   33.,  36.,  39.9, 43.,  45.4, 47.5, 50.,  52.,  54.,  55.2,
     &   58.9, 61.4, 63.3 /
      DATA ( F51LV(5,J), J = 1, 13 ) /
     &   30.,  31.9, 35.,  37.7, 40.,  41.9, 44.4, 46.7, 48.5, 50.,
     &   53.9, 56.3, 58.4 /
      DATA ( F51LV(6,J), J = 1, 13 ) /
     &   26.7, 28.,  30.5, 32.8, 34.9, 36.8, 39.2, 41.6, 43.5, 45.,
     &   49.,  51.7, 53.5 /
      DATA ( F51LV(7,J), J = 1, 13 ) /
     &   23.5, 24.9, 26.9, 28.8, 30.4, 32.,  34.9, 37.1, 39.2, 40.7,
     &   44.2, 46.9, 48.8 /
      DATA ( F51LV(8,J), J = 1, 13 ) /
     &   20.4, 22.,  24.,  25.6, 27.,  28.4, 30.8, 33.,  35.,  36.2,
     &   39.8, 42.,  44. /
      DATA ( F51LV(9,J), J = 1, 13 ) /
     &   17.4, 19.,  20.9, 22.5, 23.9, 25.,  27.,  29.,  30.8, 32.,
     &   35.4, 37.8, 39.7 /
      DATA ( F51LV(10,J), J = 1, 13 ) /
     &   14.5, 16.1, 18.2, 19.8, 21.,  22.,  23.9, 25.5, 26.9, 28.,
     &   31.3, 33.8, 35.7 /
      DATA ( F51LV(11,J), J = 1, 13 ) /
     &   11.5, 13.1, 15.3, 16.9, 18.2, 19.2, 20.8, 22.,  23.2, 24.1,
     &   27.6, 30.,  32.1 /
      DATA ( F51LV(12,J), J = 1, 13 ) /
     &    8.5, 10.1, 12.4, 13.9, 15.1, 16.2, 17.8, 19.,  20.,  21.,
     &   24.4, 27.,  29.1 /
      DATA ( F51LV(13,J), J = 1, 13 ) /
     &    5.9,  7.7,  9.8, 11.,  12.3, 13.4, 14.8, 16.,  17.1, 18.,
     &   21.6, 24.1, 26.1 /
      DATA ( F51LV(14,J), J = 1, 13 ) /
     &    3.,   4.9,  6.9,  8.2,  9.7, 10.7, 12.,  13.2, 14.2, 15.3,
     &   18.9, 21.5, 23.5 /
      DATA ( F51LV(15,J), J = 1, 13 ) /
     &     .6,  2.,   4.1,  5.7,  6.9,  8.,   9.1, 10.3, 11.6, 12.5,
     &   16.,  18.8, 20.9 /
      DATA ( F51LV(16,J), J = 1, 13 ) /
     &   -2.,   -.4,  1.6,  2.9,  4.1,  5.3,  6.7,  7.9,  9.,  10.,
     &   13.6, 16.1, 18. /
      DATA ( F51LV(17,J), J = 1, 13 ) /
     &   -4.3, -3.,  -1.,    .3,  1.6,  2.7,  3.9,  5.,   6.,   7.,
     &   10.7, 13.6, 15.7 /
      DATA ( F51LV(18,J), J = 1, 13 ) /
     &   -6.6, -5.1, -3.4, -2.2, -1.,   0.,   1.1,  2.2,  3.3,  4.4,
     &    8.,  10.9, 13. /
      DATA ( F51LV(19,J), J = 1, 13 ) /
     &   -8.7, -7.4, -5.8, -4.6, -3.4, -2.5, -1.4,  -.2,   .9,  1.8,
     &    5.2,  8.1, 10.2 /
      DATA ( F51LV(20,J), J = 1, 13 ) /
     &  -10.5, -9.4, -8.,  -6.9, -5.7, -4.9, -3.9, -2.8, -1.8,  -.8,
     &    2.8,  5.3, 7.5 /
      DATA ( F51LV(21,J), J = 1, 13 ) /
     &  -12.5, -11.4, -10.1, -9., -8., -7.,  -6.,  -5.,  -4.,  -3.,
     &     .3,   3.,    5. /
      DATA ( F51LV(22,J), J = 1, 13 ) /
     &  -14.6, -13.4, -12., -11., -10., -9., -8.,  -7.,  -6.2, -5.3,
     &   -2.,     .4,   2.6 /
      DATA ( F51LV(23,J), J = 1, 13 ) /
     &  -16.6, -15.5, -14.1, -13., -12., -11.2, -10.2, -9.2, -8.2, -7.4,
     &   -4.5,  -1.9,   0. /
      DATA ( F51LV(24,J), J = 1, 13 ) /
     &  -18.6, -17.4, -16., -15., -14., -13.2, -12.2, -11.3, -10.5,
     &   -9.8,  -7.,   -4.3, -2.4 /
      DATA ( F51LV(25,J), J = 1, 13 ) /
     &  -20.5, -19.3, -18., -17., -16., -15.1, -14.2, -13.3, -12.5,
     &  -11.8,  -9.,   -6.7, -4.6 /
      DATA ( F51LV(26,J), J = 1, 13 ) /
     &  -22.4, -21.2, -19.9, -18.9, -17.9, -17., -16.2, -15.3, -14.6,
     &  -14.,  -11.1,  -9.,   -6.9 /
      DATA ( F51LV(27,J), J = 1, 13 ) /
     &  -24.3, -23.2, -21.9, -20.9, -19.9, -19., -18.1, -17.2, -16.3,
     &  -15.8, -13.2, -11.,   -9. /
      DATA ( F51LV(28,J), J = 1, 13 ) /
     &  -26.2, -25., -23.7, -22.5, -21.7, -21., -20., -19.2, -18.4,
     &  -17.8, -15., -12.9, -11. /
      DATA ( F51LV(29,J), J = 1, 13 ) /
     &  -28.1, -27., -25.6, -24.6, -23.6, -23., -22., -21.1, -20.2,
     &  -19.6, -17., -14.9, -13. /
      DATA ( F51LV(30,J), J = 1, 13 ) /
     &  -30.,  -29., -27.4, -26.3, -25.4, -24.6, -23.7, -22.8, -22.,
     &  -21.3, -19., -16.9, -15. /

! Derived Interfering curve added to smooth out the graph and interpolation
! for the rarely used F(50,10) curve at 500 km

      DATA ( F51LV(31,J), J = 1, 13 ) /
     &  -31.9, -31., -29.2, -28.,  -27.2, -26.2, -25.4, -24.5, -23.8,
     &  -23.,  -21., -18.9, -17. /

!
!
!***********************************************************************
!                                                                      *
!F(50,50) FIELD STRENGTH DATA FOR THE HIGH VHF PROPAGATION
!    CURVE    ( TV CHANNELS 7 THROUGH 13 )
!***********************************************************************
!
      DATA ( F55HV(1,J), J = 1, 13 ) /
     &    94.6, 100.7, 101.6, 101.8, 101.9, 102., 102.3, 102.3, 102.3,
     &   102.4, 102.4, 102.4, 102.5 /
      DATA ( F55HV(2,J), J = 1, 13 ) /
     &    82.8, 88.9, 92.3, 93.9, 94.6, 95.,  95.4, 95.7, 95.9, 96.,
     &    96.2, 96.2, 96.5 /
      DATA ( F55HV(3,J), J = 1, 13 ) /
     &    75.7, 81.8, 86.6, 88.7, 89.8, 90.5, 91.3, 91.8, 92.,  92.1,
     &    92.6, 92.6, 92.7 /
      DATA ( F55HV(4,J), J = 1, 13 ) /
     &    70.7, 76.9, 82.2, 84.8, 86.2, 87.,  88., 88.7, 89.1, 89.5,
     &    90.,  90.,  90.1 /
      DATA ( F55HV(5,J), J = 1, 13 ) /
     &    66.8, 73.,  78.8, 81.6, 83.2, 84.5, 85.7, 86.3, 87., 87.3,
     &    88.,  88.,  88. /
      DATA ( F55HV(6,J), J = 1, 13 ) /
     &    55.,  61.,  67.2, 70.8, 73.2, 75.,  77.,  78.1, 79.1, 80.,
     &    81.1, 81.8, 82. /
      DATA ( F55HV(7,J), J = 1, 13 ) /
     &    42.5, 48.6, 54.7, 58.1, 60.7, 62.5, 65.,  67.6, 69.5, 71.,
     &    73.9, 74.8, 75. /
      DATA ( F55HV(8,J), J = 1, 13 ) /
     &    34.,  40.,  46.1, 49.8, 52.1, 54.2, 56.7, 59.,  61.,  62.8,
     &    66.3, 67.4, 68. /
      DATA ( F55HV(9,J), J = 1, 13 ) /
     &    26.3, 32.,  38.1, 41.7, 44.,  46.,  48.8, 51.,  53.3,  55.,
     &    58.7, 60.3, 61.1 /
      DATA ( F55HV(10,J), J = 1, 13 ) /
     &    20.7, 24.1, 30.1, 33.8, 36.1, 38.,  40.9, 43.5, 46.,  47.9,
     &    52.,  53.8, 54.6 /
      DATA ( F55HV(11,J), J = 1, 13 ) /
     &    16.3, 18.5, 23.,  26.2, 28.8, 30.6, 33.5, 36.3, 39.,  41.,
     &    45.,  47.,  48.1 /
      DATA ( F55HV(12,J), J = 1, 13 ) /
     &    12.9, 14.4, 17.,  20.,  22.1, 24.,  26.8, 29.6, 32.,  34.,
     &    38.2, 40.6, 42. /
      DATA ( F55HV(13,J), J = 1, 13 ) /
     &     9.9, 11.2, 13.5, 15.2, 17.,  18.9, 21.2, 23.9, 26.,  28.,
     &    32.,  34.4, 36.1 /
      DATA ( F55HV(14,J), J = 1, 13 ) /
     &     7.,  8.3,  10.5, 12.,  13.7, 15.,  17.,  19.,  21.,  22.6,
     &    26.3, 28.8, 30.6 /
      DATA ( F55HV(15,J), J = 1, 13 ) /
     &     4.3, 5.5,  7.5,  9.,  10.4,  11.5, 13.1, 14.9, 16.2, 17.5,
     &    21.1, 23.8, 25.5 /
      DATA ( F55HV(16,J), J = 1, 13 ) /
     &     1.5,  2.9,  4.8, 6.2,  7.5,  8.6,  10.,  11.2, 12.7, 13.6,
     &    17.,  19.8, 21.8 /
      DATA ( F55HV(17,J), J = 1, 13 ) /
     &    -1.,  .5,  2.3,  3.7,  4.8,  5.8,  7.,  8.2,  9.5,  10.5,
     &    14., 16.6, 18.5 /
      DATA ( F55HV(18,J), J = 1, 13 ) /
     &    -3.5, -2.,  -.3, 1.,  2.2,  3.2,  4.4,  5.5,  6.5,  7.4,
     &    10.7, 13.1, 15.1 /
      DATA ( F55HV(19,J), J = 1, 13 ) /
     &    -5.7, -4.3, -2.7,  -1.2,   -.1,  .9,   2.,  3.,  4.,  4.9,
     &     8.,  10.4, 12.3 /
      DATA ( F55HV(20,J), J = 1, 13 ) /
     &    -8.,  -6.9, -5.,  -3.7,  -2.5,  -1.5,  -.5,  .6, 1.5, 2.2,
     &     5.6,  8.2, 10.1 /
      DATA ( F55HV(21,J), J = 1, 13 ) /
     &   -10.4, -9.2, -7.3, -6.,  -4.9,  -4.,  -3.,  -2.,  -1.,  -.2,
     &     3.,   5.5,  7.5 /
      DATA ( F55HV(22,J), J = 1, 13 ) /
     &   -12.8, -11.5, -9.8, -8.4, -7.3, -6.3, -5.3, -4.3, -3.5, -2.6,
     &      .6,   3.1,  5.1 /
      DATA ( F55HV(23,J), J = 1, 13 ) /
     &   -15.,  -13.8, -12., -10.7, -9.7, -8.7, -7.6, -6.6, -5.8, -5.,
     &    -1.8,    .9,   2.9 /
      DATA ( F55HV(24,J), J = 1, 13 ) /
     &   -17.2, -16.,  -14.4, -13., -12., -11., -10., -9., -8.2, -7.3,
     &    -4.2,  -1.8,    .3 /
      DATA ( F55HV(25,J), J = 1, 13 ) /
     &   -19.1, -18.2, -16.8, -15.5, -14.4, -13.4, -12.3, -11.3, -10.5,
     &    -9.8,  -6.6,  -4.,   -1.9 /
!
!
!***********************************************************************
!                                                                      *
!    F(50,10) FIELD STRENGTH DATA FOR THE HIGH VHF PROPAGATION
!    CURVE    ( TV CHANNELS 7 THRS 13 )                                        *
!***********************************************************************
!
      DATA ( F51HV(1,J), J = 1, 13 ) /
     &   55.4, 61.6, 67.7, 71.,  73.5, 75.3, 77.1, 78.6, 79.6, 80.4,
     &   82.,  82.4, 82.5 /
      DATA ( F51HV(2,J), J = 1, 13 ) /
     &   44.4, 50.,  55.8, 59.1, 61.7, 63.7, 66.5, 68.9, 70.8, 72.,
     &   75.,  75.9, 76.2 /
      DATA ( F51HV(3,J), J = 1, 13 ) /
     &   39.2, 43.5, 48.6, 52.,  54.6, 56.5, 59.,  61.5, 63.6, 65.2,
     &   68.6, 69.8, 70.2 /
      DATA ( F51HV(4,J), J = 1, 13 ) /
     &   34.,  38.,  42.7, 45.6, 48.,  50.,  52.5, 54.9, 56.9, 58.8,
     &   62.5, 64.,  64.9 /
      DATA ( F51HV(5,J), J = 1, 13 ) /
     &   29.9, 32.5, 35.9, 38.8, 41.,  43.,  45.8, 48.2, 50.8, 53.,
     &   57.,  58.9, 59.8 /
      DATA ( F51HV(6,J), J = 1, 13 ) /
     &   26.6, 28.2, 31.,  33.4, 35.4, 37.4, 40.,  43.,  45.4, 47.6,
     &   52.,  53.8, 54.8 /
      DATA ( F51HV(7,J), J = 1, 13 ) /
     &   23.5, 25.,  27.,  28.9, 30.7, 32.3, 35.,  37.4, 40.,  42.,
     &   46.8, 48.9, 50. /
      DATA ( F51HV(8,J), J = 1, 13 ) /
     &   20.3, 22.,  24.,  25.5, 27.,  28.3, 30.4, 32.9, 35.,  36.8,
     &   41.5, 43.7, 45. /
      DATA ( F51HV(9,J), J = 1, 13 ) /
     &   17.4, 19.,  21.,  22.4, 23.8, 25.,  26.9, 28.8, 30.4, 32.,
     &   35.8, 38.2, 40.1 /
      DATA ( F51HV(10,J), J = 1, 13 ) /
     &   14.3, 16.,  18.1, 19.6, 20.8, 22.,  23.5, 25.,  26.4, 27.7,
     &   31.,  33.6, 35.5 /
      DATA ( F51HV(11,J), J = 1, 13 ) /
     &   11.3, 13.,  15.1, 16.7, 18.,  19.1, 20.5, 22.,  23.,  24.,
     &   27.6, 30.,  32. /
      DATA ( F51HV(12,J), J = 1, 13 ) /
     &    8.6, 10.,  12.2, 13.7, 15.,  16.3, 17.6, 18.8, 19.9, 20.7,
     &   24.,  26.8, 28.9 /
      DATA ( F51HV(13,J), J = 1, 13 ) /
     &    5.8,  7.2,  9.4, 10.8, 12.,  13.3, 14.7, 15.9, 17.,  18.,
     &   21.4, 24.,  26. /
      DATA ( F51HV(14,J), J = 1, 13 ) /
     &    2.9,  4.7,  6.8,  8.1,  9.5, 10.6, 12.,  13.,  14.1,  15.2,
     &   18.8, 21.2, 23.4 /
      DATA ( F51HV(15,J), J = 1, 13 ) /
     &     .3,  1.9,  3.8,  5.2,  6.5,  7.8,  9.,  10.3, 11.5,  12.5,
     &   16.,  18.7, 20.7 /
      DATA ( F51HV(16,J), J = 1, 13 ) /
     &   -2.1,  -.7,  1.2,  2.7,  3.9,  5.,  6.4,   7.5,  8.8,  9.8,
     &   13.1, 15.9, 18. /
      DATA ( F51HV(17,J), J = 1, 13 ) /
     &   -4.4, -3.2, -1.4,  0.,  1.2,  2.4,  3.7,   4.9,  6.,  7.,
     &   10.6, 13.2, 15.4 /
      DATA ( F51HV(18,J), J = 1, 13 ) /
     &   -6.7, -5.4, -3.8, -2.3, -1.2,  0.,  1.,  2.1,  3.3,  4.3,
     &    7.9, 10.6, 12.8 /
      DATA ( F51HV(19,J), J = 1, 13 ) /
     &   -8.9, -7.8, -6.1, -4.8, -3.8, -2.6, -1.4,  -.3,  .8,  1.7,
     &    5.,   8.,  10. /
      DATA ( F51HV(20,J), J = 1, 13 ) /
     &  -10.8,  -9.8,  -8.2,  -7.,  -6.,  -5.,  -4.,  -3.,  -2.,  -1.,
     &    2.5,   5.2,   7.3 /
      DATA ( F51HV(21,J), J = 1, 13 ) /
     &  -12.9, -11.8, -10.3,  -9.,  -8.2,  -7.1,  -6.,  -5.1,  -4.2,
     &   -3.3,   0.,    2.8,   4.9 /
      DATA ( F51HV(22,J), J = 1, 13 ) /
     &  -14.8, -13.8, -12.3, -11.1, -10.2,  -9.3,  -8.2,  -7.4,  -6.5,
     &   -5.6,  -2.4,    .2,   2.2 /
      DATA ( F51HV(23,J), J = 1, 13 ) /
     &  -16.9, -15.8, -14.3, -13.1, -12.2, -11.2, -10.2, -9.4, -8.6,
     &   -7.8,  -4.7,  -2.,    -.1 /
      DATA ( F51HV(24,J), J = 1, 13 ) /
     &  -18.8, -17.7, -16.3, -15.1, -14.2, -13.3, -12.3, -11.4, -10.6,
     &   -9.8,  -6.9,  -4.3,  -2.4 /
      DATA ( F51HV(25,J), J = 1, 13 ) /
     &  -20.7, -19.7, -18.3, -17.,  -16.2, -15.3, -14.3, -13.5, -12.8,
     &  -12.,   -9.,   -6.5,  -4.7 /
      DATA ( F51HV(26,J), J = 1, 13 ) /
     &  -22.7, -21.4, -20.1, -19.,  -18.,  -17.2, -16.2, -15.4, -14.8,
     &  -14.,  -11.1,  -9.,   -7. /
      DATA ( F51HV(27,J), J = 1, 13 ) /
     &  -24.6, -23.3, -22.,  -20.9, -20.,  -19.1, -18.2, -17.4, -16.8,
     &  -16.,  -13.1, -11.,   -9. /
      DATA ( F51HV(28,J), J = 1, 13 ) /
     &  -26.4, -25.2, -24.,  -22.9, -21.9, -21.,  -20.,  -19.2, -18.5,
     &  -18.,  -15.1, -13.,  -11. /
      DATA ( F51HV(29,J), J = 1, 13 ) /
     &  -28.2, -27.1, -25.9, -24.8, -23.9, -23.,  -22.,  -21.1, -20.3,
     &  -19.6, -17.,  -15.,  -13. /
      DATA ( F51HV(30,J), J = 1, 13 ) /
     &  -30.1, -29.,  -27.7, -26.5, -25.5, -24.9, -23.9, -23.,  -22.1,
     &  -21.5, -19.,  -16.8, -15. /

! Derived Interfering curve added to smooth out the graph and interpolation
! for the rarely used F(50,10) curve at 500 km

      DATA ( F51HV(31,J), J = 1, 13) /
     &  -32.,  -30.9 ,-29.5, -28.2, -27.1, -26.7, -25.8, -24.9,  -23.9,
     &  -23.4, -21.,  -18.6, -17. /
!
!
!***********************************************************************
!                                                                      *
!     F(50,50) FIELD STRENGTH DATA FOR THE UHF PROPAGATION CURVE
!     ( TV CHANNELS 14 THROUGH 83 )                                       *
!***********************************************************************
!
      DATA ( F55U(1,J), J = 1, 13 )  /
     &   92.,  97.9, 100.7, 101.5, 101.9, 102.,  102.1, 102.2, 102.3,
     &  102.4, 102.5, 102.5, 102.5 /
      DATA ( F55U(2,J), J = 1, 13 ) /
     &   80.,   86.,   91.,   93.,  94.1,  94.8,  95.2,  95.6,  95.9,
     &   96.,   96.3,  96.5,  96.5 /
      DATA ( F55U(3,J), J = 1, 13 )  /
     &   72.9, 79.,  84.7, 87.4, 89.,  90.,  90.8, 91.3, 91.8, 92.,
     &   92.5, 92.8, 93. /
      DATA ( F55U(4,J), J = 1, 13 )  /
     &   67.9, 74.,  80.,  83.3, 85.1, 86.3, 87.3, 88.,  88.6, 88.9,
     &   89.6, 90.,  90.3 /
      DATA ( F55U(5,J), J = 1, 13 )  /
     &   63.8, 70.,  76.,  79.5, 81.5, 82.9, 84.1, 85.,  85.8, 86.2,
     &   87.3, 87.9, 88.1 /
      DATA ( F55U(6,J), J = 1, 13 ) /
     &   51.9, 58.,  64.,  67.6, 70.,  72.,  73.8, 75.3, 76.5, 77.2,
     &   79.6, 80.5, 81. /
      DATA ( F55U(7,J), J = 1, 13 )  /
     &   39.,  45.2, 51.2, 54.6, 57.2, 59.1, 61.,  62.6, 64.,  65.,
     &   68.2, 70.,  71.1 /
      DATA ( F55U(8,J), J = 1, 13 )  /
     &   27.5, 33.5, 39.6, 43.,  45.7, 48.,  50.5, 52.3, 53.9, 55.,
     &   58.4, 60.8, 62.5 /
      DATA ( F55U(9,J), J = 1, 13 ) /
     &   17.8, 22.7, 28.2, 31.5, 34.5, 37.3, 40.3, 42.7, 44.3, 45.7,
     &   49.4, 52.1, 54. /
      DATA ( F55U(10,J), J = 1, 13 ) /
     &   13.,  16.,  19.6, 22.3, 25.1, 28.3, 31.8, 34.1, 36.,  37.6,
     &   41.7, 44.8, 46.7 /
      DATA ( F55U(11,J), J = 1, 13 ) /
     &   10.1, 11.7, 14.4, 16.8, 19.1, 21.7, 24.7, 27.,  29.3, 31.,
     &   35.4, 38.6, 41. /
      DATA ( F55U(12,J), J = 1, 13 ) /
     &    7.,   8.5, 10.8, 12.5, 14.2, 16.3, 19.,  21.3, 23.4, 25.,
     &   29.8, 33.,  35.7 /
      DATA ( F55U(13,J), J = 1, 13 ) /
     &    4.2,  5.5,  7.7,  9.3, 10.8, 12.4, 14.5, 16.3, 18., 19.8,
     &   24.5, 28., 30.8 /
      DATA ( F55U(14,J), J = 1, 13 ) /
     &    1.6,  2.8, 4.7,   6.,   7.5,  8.9, 10.6, 12.,  13.6, 15.,
     &   19.8, 23.4, 26. /
      DATA ( F55U(15,J), J = 1, 13 ) /
     &   -1.,    .2,  1.9,  3.2,  4.6,  5.7,  7.1,  8.5,  9.7, 10.8,
     &   15.,  18.8, 21.8 /
      DATA ( F55U(16,J), J = 1, 13 ) /
     &   -3.2, -2.,   -.4,   .7,  1.9,  3.,   4.3,  5.6,  6.7,  7.7,
     &   11.5, 14.8, 17.5 /
      DATA ( F55U(17,J), J = 1, 13 ) /
     &   -5.,  -4.2, -2.7, -1.5,   -.4,  .5,  1.7,  2.8,  3.8,  4.8,
     &    8.2, 11.1, 13.7 /
      DATA ( F55U(18,J), J = 1, 13 ) /
     &   -7.2, -6.3, -4.9, -3.8,  -2.9, -2.,  -.9,  0.,   1.,   1.9,
     &    5.,   7.8, 10. /
      DATA ( F55U(19,J), J = 1, 13 ) /
     &   -9.1, -8.4, -7.,  -5.9,  -5.,  -4.2, -3.2, -2.3, -1.6,  -.9,
     &    2.,   4.6,  6.7 /
      DATA ( F55U(20,J), J = 1, 13 ) /
     &  -11., -10.3, -8.9, -7.9,  -7.,  -6.1, -5.2, -4.3, -3.6, -3.,
     &    -.2,  1.9,  3.7 /
      DATA ( F55U(21,J), J = 1, 13 ) /
     &  -13.1, -12.3, -10.9, -9.9, -9.,  -8.,  -7.1, -6.2, -5.5, -4.8,
     &   -2.2,   -.1,   1.7 /
      DATA ( F55U(22,J), J = 1, 13 ) /
     &  -15.1, -14.2, -12.8, -11.7, -10.8, -10.,  -9.,  -8.2, -7.5,
     &   -6.8,  -4.3,  -2.2,   -.4 /
      DATA ( F55U(23,J), J = 1, 13 ) /
     &  -17.2, -16.2, -14.8, -13.8, -12.8, -11.9, -11.,  -10.2, -9.5,
     &   -8.9,  -6.3,  -4.2,  -2.3 /
      DATA ( F55U(24,J), J = 1, 13 ) /
     &  -19.3, -18.3, -16.8, -15.8, -14.8, -13.9, -13.,  -12.2, -11.4,
     &  -10.8,  -8.3,  -6.1,  -4.4 /
      DATA ( F55U(25,J), J = 1, 13 ) /
     &  -21.4, -20.1, -18.7, -17.7, -16.8, -15.9, -15.,  -14.1, -13.2,
     &  -12.5, -10.,   -8.,   -6.3 /
!
!
!***********************************************************************
!                                                                      *
!     F(50,10) FIELD STRENGTH DATA FOR THE UHF PROPAGATION CURVE
!     ( TV CHANNELS 14 THRS 83 )                                       *
!***********************************************************************
!
      DATA ( F51U(1,J), J = 1, 13 ) /
     &   52.2, 58.3, 64.7, 68.,  70.5, 72.3, 74.1, 75.4, 76.4, 77.4,
     &   79.5, 80.7, 81.3 /
      DATA ( F51U(2,J), J = 1, 13 ) /
     &   41.6, 46.7, 52.4, 56.,  58.5, 60.3, 62.3, 63.9, 65.2, 66.2,
     &   69.3, 71.2, 72.6 /
      DATA ( F51U(3,J), J = 1, 13 ) /
     &   35.,  38.,  43.,  46.3, 48.8, 50.8, 52.9, 54.9, 56.3, 57.6,
     &   60.9, 63.,  64.5 /
      DATA ( F51U(4,J), J = 1, 13 ) /
     &   30.3, 32.1, 35.3, 37.6, 40.,  42.4, 45.1, 47.1, 48.7, 50.,
     &   53.6, 56.1, 58. /
      DATA ( F51U(5,J), J = 1, 13 ) /
     &   27.,  28.3, 30.8, 32.6, 34.7, 36.7, 39.,  40.8, 42.4, 43.7,
     &   47.7, 50.2, 52.4 /
      DATA ( F51U(6,J), J = 1, 13 ) /
     &   23.8, 25.2, 27.6, 29.1, 30.4, 32.,  34.5, 36.4, 37.9, 39.,
     &   43.1, 46.,  48. /
      DATA ( F51U(7,J), J = 1, 13 ) /
     &   20.8, 22.2, 24.5, 26.,  27.2, 28.4, 30.4, 32.2, 33.9, 35.1,
     &   39.2, 42.1, 44.3 /
      DATA ( F51U(8,J), J = 1, 13 ) /
     &   17.8, 19.3, 21.3, 23.,  24.2, 25.4, 27.,  28.8, 30.2,  31.7,
     &   35.8, 38.7, 40.7 /
      DATA ( F51U(9,J), J = 1, 13 ) /
     &   14.8, 16.5, 18.5, 20.,  21.2, 22.4, 23.9, 25.2, 26.6, 27.8,
     &   32.,  35.,  37.3 /
      DATA ( F51U(10,J), J = 1, 13 ) /
     &   12.,  13.4, 15.6, 17.1, 18.3, 19.7, 21.,  22.1, 23.4, 24.6,
     &   28.3, 31.3, 33.8 /
      DATA ( F51U(11,J), J = 1, 13 ) /
     &    9.2, 10.7, 12.7, 14.,  15.2, 16.5, 18.,  19.3, 20.3, 21.3,
     &   24.9, 27.8, 30.3 /
      DATA ( F51U(12,J), J = 1, 13 ) /
     &    6.6,  8.,   9.9, 11.2, 12.6, 13.8, 15.3, 16.4, 17.3, 18.3,
     &   21.7, 24.3, 27. /
      DATA ( F51U(13,J), J = 1, 13 ) /
     &    4.,   5.1,  7.1,  8.8, 10.,  11., 12.5,  13.8, 14.8, 15.7,
     &   18.8, 21.2, 23.7 /
      DATA ( F51U(14,J), J = 1, 13 ) /
     &    1.2,  2.5,  4.4,  6.,  7.3,  8.3,  9.7,  10.9, 11.9, 12.8,
     &   15.9, 18.2, 20.5 /
      DATA ( F51U(15,J), J = 1, 13 ) /
     &   -1.3,  -.2,  1.8,  3.2, 4.6,  5.7,  7.,  8.1,  9.1, 10.,
     &   13.1, 15.5, 17.4 /
      DATA ( F51U(16,J), J = 1, 13 ) /
     &   -3.8, -2.4,  -.8,  .8,  1.9,  3.,  4.4,  5.6,  6.7,  7.6,
     &   10.6, 12.8, 14.7 /
      DATA ( F51U(17,J), J = 1, 13 ) /
     &   -6.,  -4.9,  -3.1,  -1.7,  -.5,  .6,  1.8,  2.9,  3.9,  4.8,
     &    7.9, 10.,  12. /
      DATA ( F51U(18,J), J = 1, 13 ) /
     &   -8.4,  -7.2, -5.5,  -4.1,  -3.,  -2.,  -.7,  .3,  1.3,  2.1,
     &    5.1,  7.3,  9.2 /
      DATA ( F51U(19,J), J = 1, 13 ) /
     &  -10.3,  -9.3,  -7.7,  -6.2,  -5.2,  -4.3,  -3.2,  -2.2,  -1.2,
     &    -.4,  2.2,  4.7,   6.5 /
      DATA ( F51U(20,J), J = 1, 13 ) /
     &  -12.5, -11.3, -9.8, -8.4, -7.4, -6.6, -5.4, -4.5, -3.6, -2.8,
     &    0.,  2.1,  4. /
      DATA ( F51U(21,J), J = 1, 13 ) /
     &  -14.5, -13.5, -12.,  -10.4, -9.6, -8.8, -7.7, -6.7, -5.8, -5.,
     &   -2.2,  0.,  1.8 /
      DATA ( F51U(22,J), J = 1, 13 ) /
     &  -16.5, -15.5, -14.,  -12.7, -11.7, -10.8, -9.8, -8.9, -7.9,
     &   -7.1,  -4.3, -2.2,  -.4 /
      DATA ( F51U(23,J), J = 1, 13 ) /
     &  -18.5, -17.4, -15.9, -14.6, -13.8, -13.,  -12.,  -11.,  -10.,
     &   -9.2,  -6.6,  -4.6,  -2.8 /
      DATA ( F51U(24,J), J = 1, 13 ) /
     &  -20.5, -19.3, -17.8, -16.5, -15.6, -14.9, -14.,  -13., -12.2,
     &  -11.3,  -8.9,  -6.8,  -5. /
      DATA ( F51U(25,J), J = 1, 13 ) /
     &  -22.4, -21.3, -19.8, -18.6, -17.7, -17.,  -16.,  -15., -14.2,
     &  -13.4, -11.,   -8.8,  -7. /
      DATA ( F51U(26,J), J = 1, 13 ) /
     &  -24.2, -23.2, -21.6, -20.4, -19.6, -18.9, -17.9, -17., -16.2,
     &  -15.4, -13.,  -10.8,  -9. /
      DATA ( F51U(27,J), J = 1, 13 ) /
     &  -26.,  -25.,  -23.4, -22.2, -21.3, -20.8, -19.9, -19.1, -18.2,
     &  -17.5, -15.,  -12.9, -11. /
      DATA ( F51U(28,J), J = 1, 13 ) /
     &  -27.8, -27.,  -25.5, -24.2, -23.3, -22.7, -21.8, -21.,  -20.2,
     &  -19.4, -17.,  -14.9, -13. /
      DATA ( F51U(29,J), J = 1, 13 ) /
     &  -29.5, -28.5, -27.1, -26.,  -25.,  -24.4, -23.7, -22.8,  -22.,
     &  -21.3, -19.,  -16.9, -15. /
      DATA ( F51U(30,J), J = 1, 13 ) /
     &  -31.,  -30.1, -28.9, -27.9, -27.,  -26.3, -25.6, -24.8,  -24.,
     &  -23.2, -21.,  -18.9, -16.8 /

! Derived Interfering curve added to smooth out the graph and interpolation
! for the rarely used F(50,10) curve at 500 km

	  DATA ( F51U(31,J), J = 1, 13 )/
     &  -32.5, -31.6, -30.7, -29.8, -29.0, -28.2, -27.5, -26.8, -26.0,
     &  -25.1, -22.9, -20.9, -18.6 /
!
!  TVFMFS:  DATA TABLE INITIALIZATION OK, CONTINUE WITH PROGRAM


!
!
!***********************************************************************
!                 ERROR CHECKS FOR ARGUMENT VALUES.                    *
!***********************************************************************
!
      data h50 / 30.48, 60.96, 121.92, 182.88, 243.84, 304.80, 381.00,
     &457.20, 533.40, 609.60, 914.40, 1219.20, 1524.00 /
      data h10 / 30.48, 60.96, 121.92, 182.88, 243.84, 304.80, 381.00,
     &457.20, 533.40, 609.60, 914.40, 1219.20, 1524.00 /
! 705 "tvfmfs_metric.for"
      flag = '  '
!
! 711 "tvfmfs_metric.for"
      if (erp .le. 0.0) then
! 713 "tvfmfs_metric.for"
      flag = 'A6'
!
! 714 "tvfmfs_metric.for"
      return
!
! 716 "tvfmfs_metric.for"
      else if (((channel .lt. 2) .or. (channel .gt. 300)) .or. ((channel
     & .gt. 83) .and. (channel .lt. 200))) then
! 721 "tvfmfs_metric.for"
      flag = 'A3'

! 722 "tvfmfs_metric.for"
      return
!
! 724 "tvfmfs_metric.for"
      else if ((curve .lt. 0) .or. (curve .gt. 1)) then
! 727 "tvfmfs_metric.for"
      flag = 'A4'
!
! 728 "tvfmfs_metric.for"
      return
!
! 730 "tvfmfs_metric.for"
      else if ((switch .lt. 1) .or. (switch .gt. 2)) then
! 733 "tvfmfs_metric.for"
      flag = 'A5'
!
! 734 "tvfmfs_metric.for"
      return
!
! 736 "tvfmfs_metric.for"
      else if ((switch .eq. 1) .and. (distance .le. 0.0)) then
! 739 "tvfmfs_metric.for"
      flag = 'A9'
!
! 740 "tvfmfs_metric.for"
      return
!
! 742 "tvfmfs_metric.for"
      end if
!
! 744 "tvfmfs_metric.for"
      erp_db = 10.0 * log10(erp)
!
! 746 "tvfmfs_metric.for"
      height = haat
!
! 748 "tvfmfs_metric.for"
      if (haat .lt. 30.0) then
! 750 "tvfmfs_metric.for"
      height = 30.0
!
! 751 "tvfmfs_metric.for"
      flag = 'A7'
!
! 753 "tvfmfs_metric.for"
      else if (haat .gt. 1600.0) then
! 755 "tvfmfs_metric.for"
      height = 1600.0
!
! 756 "tvfmfs_metric.for"
      flag = 'A8'
!
!***********************************************************************
!     FOR SWITCH = 1, FIND THE "FIELD" AT THE DISTANCE SPECIFIED IN    *
!     "DISTANCE".  IF THE DISTANCE IS LESS THAN 1.5 KM, USE THE FREE   *
!     SPACE EQUATION.                                                  *
!***********************************************************************
!
! 758 "tvfmfs_metric.for"
      end if
!
! 766 "tvfmfs_metric.for"
      if (switch .eq. 1) then
!
! 768 "tvfmfs_metric.for"
      if (distance .lt. 1.5) then
!
! 770 "tvfmfs_metric.for"
      field = (106.92 - (20.0 * log10(distance))) + erp_db
! 772 "tvfmfs_metric.for"
      flag = 'A1'
!
! 773 "tvfmfs_metric.for"
      return
!
! 775 "tvfmfs_metric.for"
      else if (((curve .eq. 0) .and. (distance .gt. 300.0)) .or. ((curve
     & .eq. 1) .and. (distance .gt. 500.0))) then
!
! 778 "tvfmfs_metric.for"
      flag = 'A2'
!
! 780 "tvfmfs_metric.for"
      end if
! 782 "tvfmfs_metric.for"
      h(1) = height
!
! 783 "tvfmfs_metric.for"
      d(1) = distance
!
! 785 "tvfmfs_metric.for"
      if (((channel .ge. 2) .and. (channel .le. 6)) .or. ((channel .ge.
     &200) .and. (channel .le. 300))) then
!
! 788 "tvfmfs_metric.for"
      if ((curve .eq. 0) .or. ((curve .eq. 1) .and. (distance .lt. 15.0)
     &)) then
!
! 791 "tvfmfs_metric.for"
      call itplbv(6, id50, ih50, d50, h50, f55lv, 1, d, h, f)
!
      else if (curve .eq. 1) then
!
      call itplbv(6, id10, ih10, d10, h10, f51lv, 1, d, h, f)
!
! 799 "tvfmfs_metric.for"
      end if
!
! 801 "tvfmfs_metric.for"
      else if ((channel .ge. 7) .and. (channel .le. 13)) then
!
      if ((curve .eq. 0) .or. ((curve .eq. 1) .and. (distance .lt. 15.0)
     &)) then
!
      call itplbv(6, id50, ih50, d50, h50, f55hv, 1, d, h, f)
!
! 810 "tvfmfs_metric.for"
      else if (curve .eq. 1) then
!
! 812 "tvfmfs_metric.for"
      call itplbv(6, id10, ih10, d10, h10, f51hv, 1, d, h, f)
!
      end if
!
      else if ((channel .ge. 14) .and. (channel .le. 83)) then
!
! 820 "tvfmfs_metric.for"
      if ((curve .eq. 0) .or. ((curve .eq. 1) .and. (distance .lt. 15.0)
     &)) then
!
! 823 "tvfmfs_metric.for"
      call itplbv(6, id50, ih50, d50, h50, f55u, 1, d, h, f)
!
      else if (curve .eq. 1) then
!
      call itplbv(6, id10, ih10, d10, h10, f51u, 1, d, h, f)
!
! 831 "tvfmfs_metric.for"
      end if
!
! 833 "tvfmfs_metric.for"
      end if
!
! 835 "tvfmfs_metric.for"
      field = f(1) + erp_db
!
!***********************************************************************
!     FOR SWITCH = 2, THE "DISTANCE" FOR A SPECIFIED "FIELD" VALUE IS
!     FOUND BY COMPUTING A FIELD VS. DISTANCE CURVE AT
!     INCREMENTS OF   *
!     0.5 KILOMETER AND THEN FINDING THE CORRECT DISTANCE VALUE
!     BY  INTERPOLATING BETWEEN THE FIELD POINTS.                          *
!***********************************************************************
!
! 837 "tvfmfs_metric.for"
      return
!
! 846 "tvfmfs_metric.for"
      else if (switch .eq. 2) then
!
! 848 "tvfmfs_metric.for"
      curve_2 = curve
!
! 850 "tvfmfs_metric.for"
      do i = 1, n_points, 1
!
! 852 "tvfmfs_metric.for"
      h(i) = height
!
! 854 "tvfmfs_metric.for"
      end do
!
! 856 "tvfmfs_metric.for"
  100 if (curve_2 .eq. 0) then
! 858 "tvfmfs_metric.for"
      d_first = 1.5
!
! 859 "tvfmfs_metric.for"
      d_last = 300.0
!
! 861 "tvfmfs_metric.for"
      else if (curve_2 .eq. 1) then
! 863 "tvfmfs_metric.for"
      d_first = 15.0
!
! 864 "tvfmfs_metric.for"
      d_last = 500.0
!
! 866 "tvfmfs_metric.for"
      end if
!
! 868 "tvfmfs_metric.for"
      do i = 1, n_points, 1
!
! 870 "tvfmfs_metric.for"
      d(i) = d_first + ((i - 1) * delta)
!
! 872 "tvfmfs_metric.for"
      end do
!
! 874 "tvfmfs_metric.for"
  110 if (((channel .ge. 2) .and. (channel .le. 6)) .or. ((channel .ge.
     &200) .and. (channel .le. 300))) then
!
! 877 "tvfmfs_metric.for"
      if (curve_2 .eq. 0) then
!
! 879 "tvfmfs_metric.for"
      call itplbv(6, id50, ih50, d50, h50, f55lv, n_points, d, h, f)
!
      else if (curve_2 .eq. 1) then
!
      call itplbv(6, id10, ih10, d10, h10, f51lv, n_points, d, h, f)
!
! 887 "tvfmfs_metric.for"
      end if
!
! 889 "tvfmfs_metric.for"
      else if ((channel .ge. 7) .and. (channel .le. 13)) then
!
      if (curve_2 .eq. 0) then
!
      call itplbv(6, id50, ih50, d50, h50, f55hv, n_points, d, h, f)
!
! 897 "tvfmfs_metric.for"
      else if (curve_2 .eq. 1) then
!
! 899 "tvfmfs_metric.for"
      call itplbv(6, id10, ih10, d10, h10, f51hv, n_points, d, h, f)
!
      end if
!
      else if ((channel .ge. 14) .and. (channel .le. 83)) then
!
! 907 "tvfmfs_metric.for"
      if (curve_2 .eq. 0) then
!
! 909 "tvfmfs_metric.for"
      call itplbv(6, id50, ih50, d50, h50, f55u, n_points, d, h, f)
!
      else if (curve_2 .eq. 1) then
!
      call itplbv(6, id10, ih10, d10, h10, f51u, n_points, d, h, f)
!
! 917 "tvfmfs_metric.for"
      end if
!
! 919 "tvfmfs_metric.for"
      end if
!
! 921 "tvfmfs_metric.for"
      do i = 1, n_points, 1
!
! 923 "tvfmfs_metric.for"
      f(i) = f(i) + erp_db
!
!***********************************************************************
!     IF THE REQUESTED FIELD IS GREATER THAN THE FIRST POINT;          *
!     USE FREE SPACE IF THE CURVE WAS F(50,50), ELSE IF THE CURVE WAS  *
!     F(50,10), CHANGE TO F(50,50) AND RECALCULATE BECAUSE THE         *
!     DISTANCE SHOULD BE LESS THAN 15 KILOMETERS.                      *
!***********************************************************************
!
! 925 "tvfmfs_metric.for"
      end do
!
! 934 "tvfmfs_metric.for"
      if (field .gt. f(1)) then
!
! 936 "tvfmfs_metric.for"
      if (curve_2 .eq. 1) then
! 938 "tvfmfs_metric.for"
      curve_2 = 0
!
! 939 "tvfmfs_metric.for"
      goto 100
!
! 941 "tvfmfs_metric.for"
      else
!
! 943 "tvfmfs_metric.for"
      flag = 'A1'
!
! 945 "tvfmfs_metric.for"
      e_volts_meter = 1.0e-6 * (10.0 ** (field / 20.0))
!
! 947 "tvfmfs_metric.for"
      distance = (7.014271e-3 * sqrt(erp * 1000.)) / e_volts_meter

!  Added 9/2004 to prevent free space distance from exceeding
!  minimum curves distance of 1.5 km

	  if(distance. gt. 1.5) distance = 1.5
!
      return
!
!***********************************************************************
!     IF FIELD IS LESS THAN LAST POINT ON CURVE, RECALCULATE CURVE
!     WITH NEXT RANGE OF DISTANCES.                                    *
!***********************************************************************
!
! 952 "tvfmfs_metric.for"
      end if
!
! 959 "tvfmfs_metric.for"
      else if (field .lt. f(n_points)) then
!
! 961 "tvfmfs_metric.for"
      do i = 1, n_points, 1
!
! 963 "tvfmfs_metric.for"
      d(i) = d(i) + range
!
! 965 "tvfmfs_metric.for"
      end do
!
! 967 "tvfmfs_metric.for"
      if (d(1) .lt. d_last) then
!
! 969 "tvfmfs_metric.for"
      goto 110
!
! 971 "tvfmfs_metric.for"
      else
! 973 "tvfmfs_metric.for"
      flag = 'A2'
      distance = 0.0
!
! 975 "tvfmfs_metric.for"
      return
!
!***********************************************************************
!     FIELD VALUE LIES ON THE CURVE, FIND THE CORRESPONDING
!     DISTANCE   BY INTERPOLATION.                                                *
!***********************************************************************
!
! 977 "tvfmfs_metric.for"
      end if
!
! 984 "tvfmfs_metric.for"
      else
!
! 986 "tvfmfs_metric.for"
      do i = 2, n_points, 1

      if ((field .le. f(i - 1)) .and. (field .gt. f(i))) then
!
      distance = (((field - f(i - 1)) / (f(i) - f(i - 1))) * (d(i) - d(i
     & - 1))) + d(i - 1)
!
      if (distance .gt. d_last) then
        flag = 'A2'
      end if
      return
      end if
      end do
      end if
!
!***********************************************************************
!     IF WE ARE HERE, WE GOOFED SOMEHOW.                               *
!***********************************************************************

      end if

      write(unit=6, fmt=200)

  200 format(26h0 LOGIC ERROR FROM TVFMFS,/
     &35h  CONTACT GARY KALAGIAN AT 632-2049/
     &28h  OR JOHN BOURSY AT 634-6315)

      return

      end




! =======================================================================
!   UPPER.F:

      subroutine upper (string)
!
!     Subroutine by John Boursy, December 1982.
!
!     This subroutine takes a character string and converts all lower
!     case letters to upper case letters.  That is, letters in the range
!     from a to z, inclusive, are converted to letters in the range
!     from A to Z.  Characters outside of this range are not touched.
!
!     string, the input argument, must be a character variable; it can
!     be any length.
!
!     ******************************************************************
!
      character string *(*)
!
      do 100 i=1,len(string),1
      if (string(i:i).ge.'a'.and.string(i:i).le.'z')
     2   string(i:i)=char(ichar(string(i:i))-32)
100   continue
!
      return
      end




